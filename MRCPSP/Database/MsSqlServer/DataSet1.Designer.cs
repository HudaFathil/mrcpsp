//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace MRCPSP.Database.MsSqlServer {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : global::System.Data.DataSet {
        
        private ResourceUsageDataTable tableResourceUsage;
        
        private FamiliesDataTable tableFamilies;
        
        private OperationsDataTable tableOperations;
        
        private ProblemsDataTable tableProblems;
        
        private OperationsToFamiliesDataTable tableOperationsToFamilies;
        
        private ModesDataTable tableModes;
        
        private ResourcesDataTable tableResources;
        
        private FamilyCapacityOnResourceDataTable tableFamilyCapacityOnResource;
        
        private PrecedenceDataTable tablePrecedence;
        
        private JobsDataTable tableJobs;
        
        private LoadingTimesDataTable tableLoadingTimes;
        
        private ConstantDelaysDataTable tableConstantDelays;
        
        private Exclusive_FamiliesDataTable tableExclusive_Families;
        
        private Exclusive_JobsDataTable tableExclusive_Jobs;
        
        private ComplementariesDataTable tableComplementaries;
        
        private ExclusivesDataTable tableExclusives;
        
        private StatisticsSolutionsDataTable tableStatisticsSolutions;
        
        private GenerationsDataTable tableGenerations;
        
        private BestSolutionDataTable tableBestSolution;
        
        private global::System.Data.DataRelation relationModesResourceUsage;
        
        private global::System.Data.DataRelation relationResourcesResourceUsage;
        
        private global::System.Data.DataRelation relationOperationsOperationsToFamilies;
        
        private global::System.Data.DataRelation relationFamiliesOperationsToFamilies;
        
        private global::System.Data.DataRelation relationOperationsModes;
        
        private global::System.Data.DataRelation relationFamiliesFamilyCapacityOnResource;
        
        private global::System.Data.DataRelation relationFamiliesPrecedence;
        
        private global::System.Data.DataRelation relationFamiliesJobs;
        
        private global::System.Data.DataRelation relationResourcesLoadingTimes;
        
        private global::System.Data.DataRelation relationStatisticsSolutions_Generations;
        
        private global::System.Data.DataRelation relationProblems_Solutions;
        
        private global::System.Data.DataRelation relationStatisticsSolutions_BestSolution;
        
        private global::System.Data.DataRelation relationResources_BestSolution;
        
        private global::System.Data.DataRelation relationFamilies_BestSolution;
        
        private global::System.Data.DataRelation relationOperations_BestSolution;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ResourceUsage"] != null)) {
                    base.Tables.Add(new ResourceUsageDataTable(ds.Tables["ResourceUsage"]));
                }
                if ((ds.Tables["Families"] != null)) {
                    base.Tables.Add(new FamiliesDataTable(ds.Tables["Families"]));
                }
                if ((ds.Tables["Operations"] != null)) {
                    base.Tables.Add(new OperationsDataTable(ds.Tables["Operations"]));
                }
                if ((ds.Tables["Problems"] != null)) {
                    base.Tables.Add(new ProblemsDataTable(ds.Tables["Problems"]));
                }
                if ((ds.Tables["OperationsToFamilies"] != null)) {
                    base.Tables.Add(new OperationsToFamiliesDataTable(ds.Tables["OperationsToFamilies"]));
                }
                if ((ds.Tables["Modes"] != null)) {
                    base.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
                }
                if ((ds.Tables["Resources"] != null)) {
                    base.Tables.Add(new ResourcesDataTable(ds.Tables["Resources"]));
                }
                if ((ds.Tables["FamilyCapacityOnResource"] != null)) {
                    base.Tables.Add(new FamilyCapacityOnResourceDataTable(ds.Tables["FamilyCapacityOnResource"]));
                }
                if ((ds.Tables["Precedence"] != null)) {
                    base.Tables.Add(new PrecedenceDataTable(ds.Tables["Precedence"]));
                }
                if ((ds.Tables["Jobs"] != null)) {
                    base.Tables.Add(new JobsDataTable(ds.Tables["Jobs"]));
                }
                if ((ds.Tables["LoadingTimes"] != null)) {
                    base.Tables.Add(new LoadingTimesDataTable(ds.Tables["LoadingTimes"]));
                }
                if ((ds.Tables["ConstantDelays"] != null)) {
                    base.Tables.Add(new ConstantDelaysDataTable(ds.Tables["ConstantDelays"]));
                }
                if ((ds.Tables["Exclusive_Families"] != null)) {
                    base.Tables.Add(new Exclusive_FamiliesDataTable(ds.Tables["Exclusive_Families"]));
                }
                if ((ds.Tables["Exclusive_Jobs"] != null)) {
                    base.Tables.Add(new Exclusive_JobsDataTable(ds.Tables["Exclusive_Jobs"]));
                }
                if ((ds.Tables["Complementaries"] != null)) {
                    base.Tables.Add(new ComplementariesDataTable(ds.Tables["Complementaries"]));
                }
                if ((ds.Tables["Exclusives"] != null)) {
                    base.Tables.Add(new ExclusivesDataTable(ds.Tables["Exclusives"]));
                }
                if ((ds.Tables["StatisticsSolutions"] != null)) {
                    base.Tables.Add(new StatisticsSolutionsDataTable(ds.Tables["StatisticsSolutions"]));
                }
                if ((ds.Tables["Generations"] != null)) {
                    base.Tables.Add(new GenerationsDataTable(ds.Tables["Generations"]));
                }
                if ((ds.Tables["BestSolution"] != null)) {
                    base.Tables.Add(new BestSolutionDataTable(ds.Tables["BestSolution"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResourceUsageDataTable ResourceUsage {
            get {
                return this.tableResourceUsage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FamiliesDataTable Families {
            get {
                return this.tableFamilies;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OperationsDataTable Operations {
            get {
                return this.tableOperations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProblemsDataTable Problems {
            get {
                return this.tableProblems;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OperationsToFamiliesDataTable OperationsToFamilies {
            get {
                return this.tableOperationsToFamilies;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ModesDataTable Modes {
            get {
                return this.tableModes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ResourcesDataTable Resources {
            get {
                return this.tableResources;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FamilyCapacityOnResourceDataTable FamilyCapacityOnResource {
            get {
                return this.tableFamilyCapacityOnResource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PrecedenceDataTable Precedence {
            get {
                return this.tablePrecedence;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JobsDataTable Jobs {
            get {
                return this.tableJobs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LoadingTimesDataTable LoadingTimes {
            get {
                return this.tableLoadingTimes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ConstantDelaysDataTable ConstantDelays {
            get {
                return this.tableConstantDelays;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Exclusive_FamiliesDataTable Exclusive_Families {
            get {
                return this.tableExclusive_Families;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Exclusive_JobsDataTable Exclusive_Jobs {
            get {
                return this.tableExclusive_Jobs;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ComplementariesDataTable Complementaries {
            get {
                return this.tableComplementaries;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ExclusivesDataTable Exclusives {
            get {
                return this.tableExclusives;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StatisticsSolutionsDataTable StatisticsSolutions {
            get {
                return this.tableStatisticsSolutions;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GenerationsDataTable Generations {
            get {
                return this.tableGenerations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BestSolutionDataTable BestSolution {
            get {
                return this.tableBestSolution;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ResourceUsage"] != null)) {
                    base.Tables.Add(new ResourceUsageDataTable(ds.Tables["ResourceUsage"]));
                }
                if ((ds.Tables["Families"] != null)) {
                    base.Tables.Add(new FamiliesDataTable(ds.Tables["Families"]));
                }
                if ((ds.Tables["Operations"] != null)) {
                    base.Tables.Add(new OperationsDataTable(ds.Tables["Operations"]));
                }
                if ((ds.Tables["Problems"] != null)) {
                    base.Tables.Add(new ProblemsDataTable(ds.Tables["Problems"]));
                }
                if ((ds.Tables["OperationsToFamilies"] != null)) {
                    base.Tables.Add(new OperationsToFamiliesDataTable(ds.Tables["OperationsToFamilies"]));
                }
                if ((ds.Tables["Modes"] != null)) {
                    base.Tables.Add(new ModesDataTable(ds.Tables["Modes"]));
                }
                if ((ds.Tables["Resources"] != null)) {
                    base.Tables.Add(new ResourcesDataTable(ds.Tables["Resources"]));
                }
                if ((ds.Tables["FamilyCapacityOnResource"] != null)) {
                    base.Tables.Add(new FamilyCapacityOnResourceDataTable(ds.Tables["FamilyCapacityOnResource"]));
                }
                if ((ds.Tables["Precedence"] != null)) {
                    base.Tables.Add(new PrecedenceDataTable(ds.Tables["Precedence"]));
                }
                if ((ds.Tables["Jobs"] != null)) {
                    base.Tables.Add(new JobsDataTable(ds.Tables["Jobs"]));
                }
                if ((ds.Tables["LoadingTimes"] != null)) {
                    base.Tables.Add(new LoadingTimesDataTable(ds.Tables["LoadingTimes"]));
                }
                if ((ds.Tables["ConstantDelays"] != null)) {
                    base.Tables.Add(new ConstantDelaysDataTable(ds.Tables["ConstantDelays"]));
                }
                if ((ds.Tables["Exclusive_Families"] != null)) {
                    base.Tables.Add(new Exclusive_FamiliesDataTable(ds.Tables["Exclusive_Families"]));
                }
                if ((ds.Tables["Exclusive_Jobs"] != null)) {
                    base.Tables.Add(new Exclusive_JobsDataTable(ds.Tables["Exclusive_Jobs"]));
                }
                if ((ds.Tables["Complementaries"] != null)) {
                    base.Tables.Add(new ComplementariesDataTable(ds.Tables["Complementaries"]));
                }
                if ((ds.Tables["Exclusives"] != null)) {
                    base.Tables.Add(new ExclusivesDataTable(ds.Tables["Exclusives"]));
                }
                if ((ds.Tables["StatisticsSolutions"] != null)) {
                    base.Tables.Add(new StatisticsSolutionsDataTable(ds.Tables["StatisticsSolutions"]));
                }
                if ((ds.Tables["Generations"] != null)) {
                    base.Tables.Add(new GenerationsDataTable(ds.Tables["Generations"]));
                }
                if ((ds.Tables["BestSolution"] != null)) {
                    base.Tables.Add(new BestSolutionDataTable(ds.Tables["BestSolution"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableResourceUsage = ((ResourceUsageDataTable)(base.Tables["ResourceUsage"]));
            if ((initTable == true)) {
                if ((this.tableResourceUsage != null)) {
                    this.tableResourceUsage.InitVars();
                }
            }
            this.tableFamilies = ((FamiliesDataTable)(base.Tables["Families"]));
            if ((initTable == true)) {
                if ((this.tableFamilies != null)) {
                    this.tableFamilies.InitVars();
                }
            }
            this.tableOperations = ((OperationsDataTable)(base.Tables["Operations"]));
            if ((initTable == true)) {
                if ((this.tableOperations != null)) {
                    this.tableOperations.InitVars();
                }
            }
            this.tableProblems = ((ProblemsDataTable)(base.Tables["Problems"]));
            if ((initTable == true)) {
                if ((this.tableProblems != null)) {
                    this.tableProblems.InitVars();
                }
            }
            this.tableOperationsToFamilies = ((OperationsToFamiliesDataTable)(base.Tables["OperationsToFamilies"]));
            if ((initTable == true)) {
                if ((this.tableOperationsToFamilies != null)) {
                    this.tableOperationsToFamilies.InitVars();
                }
            }
            this.tableModes = ((ModesDataTable)(base.Tables["Modes"]));
            if ((initTable == true)) {
                if ((this.tableModes != null)) {
                    this.tableModes.InitVars();
                }
            }
            this.tableResources = ((ResourcesDataTable)(base.Tables["Resources"]));
            if ((initTable == true)) {
                if ((this.tableResources != null)) {
                    this.tableResources.InitVars();
                }
            }
            this.tableFamilyCapacityOnResource = ((FamilyCapacityOnResourceDataTable)(base.Tables["FamilyCapacityOnResource"]));
            if ((initTable == true)) {
                if ((this.tableFamilyCapacityOnResource != null)) {
                    this.tableFamilyCapacityOnResource.InitVars();
                }
            }
            this.tablePrecedence = ((PrecedenceDataTable)(base.Tables["Precedence"]));
            if ((initTable == true)) {
                if ((this.tablePrecedence != null)) {
                    this.tablePrecedence.InitVars();
                }
            }
            this.tableJobs = ((JobsDataTable)(base.Tables["Jobs"]));
            if ((initTable == true)) {
                if ((this.tableJobs != null)) {
                    this.tableJobs.InitVars();
                }
            }
            this.tableLoadingTimes = ((LoadingTimesDataTable)(base.Tables["LoadingTimes"]));
            if ((initTable == true)) {
                if ((this.tableLoadingTimes != null)) {
                    this.tableLoadingTimes.InitVars();
                }
            }
            this.tableConstantDelays = ((ConstantDelaysDataTable)(base.Tables["ConstantDelays"]));
            if ((initTable == true)) {
                if ((this.tableConstantDelays != null)) {
                    this.tableConstantDelays.InitVars();
                }
            }
            this.tableExclusive_Families = ((Exclusive_FamiliesDataTable)(base.Tables["Exclusive_Families"]));
            if ((initTable == true)) {
                if ((this.tableExclusive_Families != null)) {
                    this.tableExclusive_Families.InitVars();
                }
            }
            this.tableExclusive_Jobs = ((Exclusive_JobsDataTable)(base.Tables["Exclusive_Jobs"]));
            if ((initTable == true)) {
                if ((this.tableExclusive_Jobs != null)) {
                    this.tableExclusive_Jobs.InitVars();
                }
            }
            this.tableComplementaries = ((ComplementariesDataTable)(base.Tables["Complementaries"]));
            if ((initTable == true)) {
                if ((this.tableComplementaries != null)) {
                    this.tableComplementaries.InitVars();
                }
            }
            this.tableExclusives = ((ExclusivesDataTable)(base.Tables["Exclusives"]));
            if ((initTable == true)) {
                if ((this.tableExclusives != null)) {
                    this.tableExclusives.InitVars();
                }
            }
            this.tableStatisticsSolutions = ((StatisticsSolutionsDataTable)(base.Tables["StatisticsSolutions"]));
            if ((initTable == true)) {
                if ((this.tableStatisticsSolutions != null)) {
                    this.tableStatisticsSolutions.InitVars();
                }
            }
            this.tableGenerations = ((GenerationsDataTable)(base.Tables["Generations"]));
            if ((initTable == true)) {
                if ((this.tableGenerations != null)) {
                    this.tableGenerations.InitVars();
                }
            }
            this.tableBestSolution = ((BestSolutionDataTable)(base.Tables["BestSolution"]));
            if ((initTable == true)) {
                if ((this.tableBestSolution != null)) {
                    this.tableBestSolution.InitVars();
                }
            }
            this.relationModesResourceUsage = this.Relations["ModesResourceUsage"];
            this.relationResourcesResourceUsage = this.Relations["ResourcesResourceUsage"];
            this.relationOperationsOperationsToFamilies = this.Relations["OperationsOperationsToFamilies"];
            this.relationFamiliesOperationsToFamilies = this.Relations["FamiliesOperationsToFamilies"];
            this.relationOperationsModes = this.Relations["OperationsModes"];
            this.relationFamiliesFamilyCapacityOnResource = this.Relations["FamiliesFamilyCapacityOnResource"];
            this.relationFamiliesPrecedence = this.Relations["FamiliesPrecedence"];
            this.relationFamiliesJobs = this.Relations["FamiliesJobs"];
            this.relationResourcesLoadingTimes = this.Relations["ResourcesLoadingTimes"];
            this.relationStatisticsSolutions_Generations = this.Relations["StatisticsSolutions_Generations"];
            this.relationProblems_Solutions = this.Relations["Problems_Solutions"];
            this.relationStatisticsSolutions_BestSolution = this.Relations["StatisticsSolutions_BestSolution"];
            this.relationResources_BestSolution = this.Relations["Resources_BestSolution"];
            this.relationFamilies_BestSolution = this.Relations["Families_BestSolution"];
            this.relationOperations_BestSolution = this.Relations["Operations_BestSolution"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableResourceUsage = new ResourceUsageDataTable();
            base.Tables.Add(this.tableResourceUsage);
            this.tableFamilies = new FamiliesDataTable();
            base.Tables.Add(this.tableFamilies);
            this.tableOperations = new OperationsDataTable();
            base.Tables.Add(this.tableOperations);
            this.tableProblems = new ProblemsDataTable();
            base.Tables.Add(this.tableProblems);
            this.tableOperationsToFamilies = new OperationsToFamiliesDataTable();
            base.Tables.Add(this.tableOperationsToFamilies);
            this.tableModes = new ModesDataTable();
            base.Tables.Add(this.tableModes);
            this.tableResources = new ResourcesDataTable();
            base.Tables.Add(this.tableResources);
            this.tableFamilyCapacityOnResource = new FamilyCapacityOnResourceDataTable();
            base.Tables.Add(this.tableFamilyCapacityOnResource);
            this.tablePrecedence = new PrecedenceDataTable();
            base.Tables.Add(this.tablePrecedence);
            this.tableJobs = new JobsDataTable();
            base.Tables.Add(this.tableJobs);
            this.tableLoadingTimes = new LoadingTimesDataTable();
            base.Tables.Add(this.tableLoadingTimes);
            this.tableConstantDelays = new ConstantDelaysDataTable();
            base.Tables.Add(this.tableConstantDelays);
            this.tableExclusive_Families = new Exclusive_FamiliesDataTable();
            base.Tables.Add(this.tableExclusive_Families);
            this.tableExclusive_Jobs = new Exclusive_JobsDataTable();
            base.Tables.Add(this.tableExclusive_Jobs);
            this.tableComplementaries = new ComplementariesDataTable();
            base.Tables.Add(this.tableComplementaries);
            this.tableExclusives = new ExclusivesDataTable();
            base.Tables.Add(this.tableExclusives);
            this.tableStatisticsSolutions = new StatisticsSolutionsDataTable();
            base.Tables.Add(this.tableStatisticsSolutions);
            this.tableGenerations = new GenerationsDataTable();
            base.Tables.Add(this.tableGenerations);
            this.tableBestSolution = new BestSolutionDataTable();
            base.Tables.Add(this.tableBestSolution);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("ModesResourceUsage", new global::System.Data.DataColumn[] {
                        this.tableModes.Problem_IDColumn,
                        this.tableModes.Operation_IDColumn,
                        this.tableModes.Mode_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableResourceUsage.Problem_IDColumn,
                        this.tableResourceUsage.Operation_IDColumn,
                        this.tableResourceUsage.Mode_IDColumn});
            this.tableResourceUsage.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ResourcesResourceUsage", new global::System.Data.DataColumn[] {
                        this.tableResources.Problem_IDColumn,
                        this.tableResources.Resource_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableResourceUsage.Problem_IDColumn,
                        this.tableResourceUsage.Resource_IDColumn});
            this.tableResourceUsage.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OperationsOperationsToFamilies", new global::System.Data.DataColumn[] {
                        this.tableOperations.Problem_IDColumn,
                        this.tableOperations.Operation_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOperationsToFamilies.Problem_IDColumn,
                        this.tableOperationsToFamilies.Operation_IDColumn});
            this.tableOperationsToFamilies.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FamiliesOperationsToFamilies", new global::System.Data.DataColumn[] {
                        this.tableFamilies.Problem_IDColumn,
                        this.tableFamilies.Family_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOperationsToFamilies.Problem_IDColumn,
                        this.tableOperationsToFamilies.Family_IDColumn});
            this.tableOperationsToFamilies.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("OperationsModes", new global::System.Data.DataColumn[] {
                        this.tableOperations.Problem_IDColumn,
                        this.tableOperations.Operation_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableModes.Problem_IDColumn,
                        this.tableModes.Operation_IDColumn});
            this.tableModes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FamiliesFamilyCapacityOnResource", new global::System.Data.DataColumn[] {
                        this.tableFamilies.Problem_IDColumn,
                        this.tableFamilies.Family_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableFamilyCapacityOnResource.Problem_IDColumn,
                        this.tableFamilyCapacityOnResource.Family_IDColumn});
            this.tableFamilyCapacityOnResource.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FamiliesPrecedence", new global::System.Data.DataColumn[] {
                        this.tableFamilies.Problem_IDColumn,
                        this.tableFamilies.Family_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePrecedence.Problem_IDColumn,
                        this.tablePrecedence.Family_IDColumn});
            this.tablePrecedence.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("FamiliesJobs", new global::System.Data.DataColumn[] {
                        this.tableFamilies.Problem_IDColumn,
                        this.tableFamilies.Family_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableJobs.Problem_IDColumn,
                        this.tableJobs.Family_IDColumn});
            this.tableJobs.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ResourcesLoadingTimes", new global::System.Data.DataColumn[] {
                        this.tableResources.Problem_IDColumn,
                        this.tableResources.Resource_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLoadingTimes.Problem_IDColumn,
                        this.tableLoadingTimes.Resource_IDColumn});
            this.tableLoadingTimes.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationModesResourceUsage = new global::System.Data.DataRelation("ModesResourceUsage", new global::System.Data.DataColumn[] {
                        this.tableModes.Problem_IDColumn,
                        this.tableModes.Operation_IDColumn,
                        this.tableModes.Mode_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableResourceUsage.Problem_IDColumn,
                        this.tableResourceUsage.Operation_IDColumn,
                        this.tableResourceUsage.Mode_IDColumn}, false);
            this.Relations.Add(this.relationModesResourceUsage);
            this.relationResourcesResourceUsage = new global::System.Data.DataRelation("ResourcesResourceUsage", new global::System.Data.DataColumn[] {
                        this.tableResources.Problem_IDColumn,
                        this.tableResources.Resource_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableResourceUsage.Problem_IDColumn,
                        this.tableResourceUsage.Resource_IDColumn}, false);
            this.Relations.Add(this.relationResourcesResourceUsage);
            this.relationOperationsOperationsToFamilies = new global::System.Data.DataRelation("OperationsOperationsToFamilies", new global::System.Data.DataColumn[] {
                        this.tableOperations.Problem_IDColumn,
                        this.tableOperations.Operation_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOperationsToFamilies.Problem_IDColumn,
                        this.tableOperationsToFamilies.Operation_IDColumn}, false);
            this.Relations.Add(this.relationOperationsOperationsToFamilies);
            this.relationFamiliesOperationsToFamilies = new global::System.Data.DataRelation("FamiliesOperationsToFamilies", new global::System.Data.DataColumn[] {
                        this.tableFamilies.Problem_IDColumn,
                        this.tableFamilies.Family_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableOperationsToFamilies.Problem_IDColumn,
                        this.tableOperationsToFamilies.Family_IDColumn}, false);
            this.Relations.Add(this.relationFamiliesOperationsToFamilies);
            this.relationOperationsModes = new global::System.Data.DataRelation("OperationsModes", new global::System.Data.DataColumn[] {
                        this.tableOperations.Problem_IDColumn,
                        this.tableOperations.Operation_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableModes.Problem_IDColumn,
                        this.tableModes.Operation_IDColumn}, false);
            this.Relations.Add(this.relationOperationsModes);
            this.relationFamiliesFamilyCapacityOnResource = new global::System.Data.DataRelation("FamiliesFamilyCapacityOnResource", new global::System.Data.DataColumn[] {
                        this.tableFamilies.Problem_IDColumn,
                        this.tableFamilies.Family_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableFamilyCapacityOnResource.Problem_IDColumn,
                        this.tableFamilyCapacityOnResource.Family_IDColumn}, false);
            this.Relations.Add(this.relationFamiliesFamilyCapacityOnResource);
            this.relationFamiliesPrecedence = new global::System.Data.DataRelation("FamiliesPrecedence", new global::System.Data.DataColumn[] {
                        this.tableFamilies.Problem_IDColumn,
                        this.tableFamilies.Family_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePrecedence.Problem_IDColumn,
                        this.tablePrecedence.Family_IDColumn}, false);
            this.Relations.Add(this.relationFamiliesPrecedence);
            this.relationFamiliesJobs = new global::System.Data.DataRelation("FamiliesJobs", new global::System.Data.DataColumn[] {
                        this.tableFamilies.Problem_IDColumn,
                        this.tableFamilies.Family_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableJobs.Problem_IDColumn,
                        this.tableJobs.Family_IDColumn}, false);
            this.Relations.Add(this.relationFamiliesJobs);
            this.relationResourcesLoadingTimes = new global::System.Data.DataRelation("ResourcesLoadingTimes", new global::System.Data.DataColumn[] {
                        this.tableResources.Problem_IDColumn,
                        this.tableResources.Resource_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableLoadingTimes.Problem_IDColumn,
                        this.tableLoadingTimes.Resource_IDColumn}, false);
            this.Relations.Add(this.relationResourcesLoadingTimes);
            this.relationStatisticsSolutions_Generations = new global::System.Data.DataRelation("StatisticsSolutions_Generations", new global::System.Data.DataColumn[] {
                        this.tableStatisticsSolutions.Solution_IDColumn,
                        this.tableStatisticsSolutions.Problem_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableGenerations.Solution_IDColumn,
                        this.tableGenerations.Problem_IDColumn}, false);
            this.Relations.Add(this.relationStatisticsSolutions_Generations);
            this.relationProblems_Solutions = new global::System.Data.DataRelation("Problems_Solutions", new global::System.Data.DataColumn[] {
                        this.tableProblems.Problem_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableStatisticsSolutions.Problem_IDColumn}, false);
            this.Relations.Add(this.relationProblems_Solutions);
            this.relationStatisticsSolutions_BestSolution = new global::System.Data.DataRelation("StatisticsSolutions_BestSolution", new global::System.Data.DataColumn[] {
                        this.tableStatisticsSolutions.Solution_IDColumn,
                        this.tableStatisticsSolutions.Problem_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableBestSolution.Solution_IDColumn,
                        this.tableBestSolution.Problem_IDColumn}, false);
            this.Relations.Add(this.relationStatisticsSolutions_BestSolution);
            this.relationResources_BestSolution = new global::System.Data.DataRelation("Resources_BestSolution", new global::System.Data.DataColumn[] {
                        this.tableResources.Problem_IDColumn,
                        this.tableResources.Resource_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableBestSolution.Problem_IDColumn,
                        this.tableBestSolution.Resource_IDColumn}, false);
            this.Relations.Add(this.relationResources_BestSolution);
            this.relationFamilies_BestSolution = new global::System.Data.DataRelation("Families_BestSolution", new global::System.Data.DataColumn[] {
                        this.tableFamilies.Problem_IDColumn,
                        this.tableFamilies.Family_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableBestSolution.Problem_IDColumn,
                        this.tableBestSolution.Family_IDColumn}, false);
            this.Relations.Add(this.relationFamilies_BestSolution);
            this.relationOperations_BestSolution = new global::System.Data.DataRelation("Operations_BestSolution", new global::System.Data.DataColumn[] {
                        this.tableOperations.Problem_IDColumn,
                        this.tableOperations.Operation_IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableBestSolution.Problem_IDColumn,
                        this.tableBestSolution.Step_IDColumn}, false);
            this.Relations.Add(this.relationOperations_BestSolution);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResourceUsage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFamilies() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOperations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProblems() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOperationsToFamilies() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeModes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResources() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFamilyCapacityOnResource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePrecedence() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJobs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLoadingTimes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConstantDelays() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExclusive_Families() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExclusive_Jobs() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeComplementaries() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeExclusives() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStatisticsSolutions() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGenerations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBestSolution() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ResourceUsageRowChangeEventHandler(object sender, ResourceUsageRowChangeEvent e);
        
        public delegate void FamiliesRowChangeEventHandler(object sender, FamiliesRowChangeEvent e);
        
        public delegate void OperationsRowChangeEventHandler(object sender, OperationsRowChangeEvent e);
        
        public delegate void ProblemsRowChangeEventHandler(object sender, ProblemsRowChangeEvent e);
        
        public delegate void OperationsToFamiliesRowChangeEventHandler(object sender, OperationsToFamiliesRowChangeEvent e);
        
        public delegate void ModesRowChangeEventHandler(object sender, ModesRowChangeEvent e);
        
        public delegate void ResourcesRowChangeEventHandler(object sender, ResourcesRowChangeEvent e);
        
        public delegate void FamilyCapacityOnResourceRowChangeEventHandler(object sender, FamilyCapacityOnResourceRowChangeEvent e);
        
        public delegate void PrecedenceRowChangeEventHandler(object sender, PrecedenceRowChangeEvent e);
        
        public delegate void JobsRowChangeEventHandler(object sender, JobsRowChangeEvent e);
        
        public delegate void LoadingTimesRowChangeEventHandler(object sender, LoadingTimesRowChangeEvent e);
        
        public delegate void ConstantDelaysRowChangeEventHandler(object sender, ConstantDelaysRowChangeEvent e);
        
        public delegate void Exclusive_FamiliesRowChangeEventHandler(object sender, Exclusive_FamiliesRowChangeEvent e);
        
        public delegate void Exclusive_JobsRowChangeEventHandler(object sender, Exclusive_JobsRowChangeEvent e);
        
        public delegate void ComplementariesRowChangeEventHandler(object sender, ComplementariesRowChangeEvent e);
        
        public delegate void ExclusivesRowChangeEventHandler(object sender, ExclusivesRowChangeEvent e);
        
        public delegate void StatisticsSolutionsRowChangeEventHandler(object sender, StatisticsSolutionsRowChangeEvent e);
        
        public delegate void GenerationsRowChangeEventHandler(object sender, GenerationsRowChangeEvent e);
        
        public delegate void BestSolutionRowChangeEventHandler(object sender, BestSolutionRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResourceUsageDataTable : global::System.Data.TypedTableBase<ResourceUsageRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnOperation_ID;
            
            private global::System.Data.DataColumn columnMode_ID;
            
            private global::System.Data.DataColumn columnResource_ID;
            
            private global::System.Data.DataColumn columnTs;
            
            private global::System.Data.DataColumn columnTf;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourceUsageDataTable() {
                this.TableName = "ResourceUsage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResourceUsageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResourceUsageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation_IDColumn {
                get {
                    return this.columnOperation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mode_IDColumn {
                get {
                    return this.columnMode_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Resource_IDColumn {
                get {
                    return this.columnResource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TsColumn {
                get {
                    return this.columnTs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TfColumn {
                get {
                    return this.columnTf;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourceUsageRow this[int index] {
                get {
                    return ((ResourceUsageRow)(this.Rows[index]));
                }
            }
            
            public event ResourceUsageRowChangeEventHandler ResourceUsageRowChanging;
            
            public event ResourceUsageRowChangeEventHandler ResourceUsageRowChanged;
            
            public event ResourceUsageRowChangeEventHandler ResourceUsageRowDeleting;
            
            public event ResourceUsageRowChangeEventHandler ResourceUsageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResourceUsageRow(ResourceUsageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourceUsageRow AddResourceUsageRow(int Problem_ID, int Operation_ID, int Mode_ID, int Resource_ID, int Ts, int Tf) {
                ResourceUsageRow rowResourceUsageRow = ((ResourceUsageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Operation_ID,
                        Mode_ID,
                        Resource_ID,
                        Ts,
                        Tf};
                rowResourceUsageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowResourceUsageRow);
                return rowResourceUsageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourceUsageRow FindByProblem_IDOperation_IDMode_IDResource_ID(int Problem_ID, int Operation_ID, int Mode_ID, int Resource_ID) {
                return ((ResourceUsageRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Operation_ID,
                            Mode_ID,
                            Resource_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ResourceUsageDataTable cln = ((ResourceUsageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ResourceUsageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnOperation_ID = base.Columns["Operation_ID"];
                this.columnMode_ID = base.Columns["Mode_ID"];
                this.columnResource_ID = base.Columns["Resource_ID"];
                this.columnTs = base.Columns["Ts"];
                this.columnTf = base.Columns["Tf"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnOperation_ID = new global::System.Data.DataColumn("Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_ID);
                this.columnMode_ID = new global::System.Data.DataColumn("Mode_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMode_ID);
                this.columnResource_ID = new global::System.Data.DataColumn("Resource_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResource_ID);
                this.columnTs = new global::System.Data.DataColumn("Ts", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTs);
                this.columnTf = new global::System.Data.DataColumn("Tf", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTf);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key2", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnOperation_ID,
                                this.columnMode_ID,
                                this.columnResource_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnOperation_ID.AllowDBNull = false;
                this.columnMode_ID.AllowDBNull = false;
                this.columnResource_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourceUsageRow NewResourceUsageRow() {
                return ((ResourceUsageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ResourceUsageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ResourceUsageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResourceUsageRowChanged != null)) {
                    this.ResourceUsageRowChanged(this, new ResourceUsageRowChangeEvent(((ResourceUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResourceUsageRowChanging != null)) {
                    this.ResourceUsageRowChanging(this, new ResourceUsageRowChangeEvent(((ResourceUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResourceUsageRowDeleted != null)) {
                    this.ResourceUsageRowDeleted(this, new ResourceUsageRowChangeEvent(((ResourceUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResourceUsageRowDeleting != null)) {
                    this.ResourceUsageRowDeleting(this, new ResourceUsageRowChangeEvent(((ResourceUsageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResourceUsageRow(ResourceUsageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResourceUsageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FamiliesDataTable : global::System.Data.TypedTableBase<FamiliesRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesDataTable() {
                this.TableName = "Families";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FamiliesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FamiliesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow this[int index] {
                get {
                    return ((FamiliesRow)(this.Rows[index]));
                }
            }
            
            public event FamiliesRowChangeEventHandler FamiliesRowChanging;
            
            public event FamiliesRowChangeEventHandler FamiliesRowChanged;
            
            public event FamiliesRowChangeEventHandler FamiliesRowDeleting;
            
            public event FamiliesRowChangeEventHandler FamiliesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFamiliesRow(FamiliesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow AddFamiliesRow(int Problem_ID, string Name, string Description) {
                FamiliesRow rowFamiliesRow = ((FamiliesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        null,
                        Name,
                        Description};
                rowFamiliesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFamiliesRow);
                return rowFamiliesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow FindByProblem_IDFamily_ID(int Problem_ID, int Family_ID) {
                return ((FamiliesRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Family_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FamiliesDataTable cln = ((FamiliesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FamiliesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key1", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnFamily_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnFamily_ID.AutoIncrement = true;
                this.columnFamily_ID.AllowDBNull = false;
                this.columnFamily_ID.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow NewFamiliesRow() {
                return ((FamiliesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FamiliesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FamiliesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FamiliesRowChanged != null)) {
                    this.FamiliesRowChanged(this, new FamiliesRowChangeEvent(((FamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FamiliesRowChanging != null)) {
                    this.FamiliesRowChanging(this, new FamiliesRowChangeEvent(((FamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FamiliesRowDeleted != null)) {
                    this.FamiliesRowDeleted(this, new FamiliesRowChangeEvent(((FamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FamiliesRowDeleting != null)) {
                    this.FamiliesRowDeleting(this, new FamiliesRowChangeEvent(((FamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFamiliesRow(FamiliesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FamiliesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OperationsDataTable : global::System.Data.TypedTableBase<OperationsRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnOperation_ID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsDataTable() {
                this.TableName = "Operations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OperationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation_IDColumn {
                get {
                    return this.columnOperation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow this[int index] {
                get {
                    return ((OperationsRow)(this.Rows[index]));
                }
            }
            
            public event OperationsRowChangeEventHandler OperationsRowChanging;
            
            public event OperationsRowChangeEventHandler OperationsRowChanged;
            
            public event OperationsRowChangeEventHandler OperationsRowDeleting;
            
            public event OperationsRowChangeEventHandler OperationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOperationsRow(OperationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow AddOperationsRow(int Problem_ID, int Operation_ID, string Name, string Description) {
                OperationsRow rowOperationsRow = ((OperationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Operation_ID,
                        Name,
                        Description};
                rowOperationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOperationsRow);
                return rowOperationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow FindByProblem_IDOperation_ID(int Problem_ID, int Operation_ID) {
                return ((OperationsRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Operation_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OperationsDataTable cln = ((OperationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OperationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnOperation_ID = base.Columns["Operation_ID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnOperation_ID = new global::System.Data.DataColumn("Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_ID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key4", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnOperation_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnOperation_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow NewOperationsRow() {
                return ((OperationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OperationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OperationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OperationsRowChanged != null)) {
                    this.OperationsRowChanged(this, new OperationsRowChangeEvent(((OperationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OperationsRowChanging != null)) {
                    this.OperationsRowChanging(this, new OperationsRowChangeEvent(((OperationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OperationsRowDeleted != null)) {
                    this.OperationsRowDeleted(this, new OperationsRowChangeEvent(((OperationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OperationsRowDeleting != null)) {
                    this.OperationsRowDeleting(this, new OperationsRowChangeEvent(((OperationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOperationsRow(OperationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OperationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProblemsDataTable : global::System.Data.TypedTableBase<ProblemsRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIF_RR;
            
            private global::System.Data.DataColumn columnIF_NP;
            
            private global::System.Data.DataColumn columnIF_NE;
            
            private global::System.Data.DataColumn columnIF_NM;
            
            private global::System.Data.DataColumn columnIF_AR;
            
            private global::System.Data.DataColumn columnIF_AOR;
            
            private global::System.Data.DataColumn columnIF_ARC;
            
            private global::System.Data.DataColumn columnRF_NZV;
            
            private global::System.Data.DataColumn columnRF_NCV;
            
            private global::System.Data.DataColumn columnRF_NRW;
            
            private global::System.Data.DataColumn columnRF_TCM;
            
            private global::System.Data.DataColumn columnRF_TFC;
            
            private global::System.Data.DataColumn columnRF_MPNZ;
            
            private global::System.Data.DataColumn columnRF_NBC;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProblemsDataTable() {
                this.TableName = "Problems";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProblemsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProblemsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IF_RRColumn {
                get {
                    return this.columnIF_RR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IF_NPColumn {
                get {
                    return this.columnIF_NP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IF_NEColumn {
                get {
                    return this.columnIF_NE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IF_NMColumn {
                get {
                    return this.columnIF_NM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IF_ARColumn {
                get {
                    return this.columnIF_AR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IF_AORColumn {
                get {
                    return this.columnIF_AOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IF_ARCColumn {
                get {
                    return this.columnIF_ARC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RF_NZVColumn {
                get {
                    return this.columnRF_NZV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RF_NCVColumn {
                get {
                    return this.columnRF_NCV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RF_NRWColumn {
                get {
                    return this.columnRF_NRW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RF_TCMColumn {
                get {
                    return this.columnRF_TCM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RF_TFCColumn {
                get {
                    return this.columnRF_TFC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RF_MPNZColumn {
                get {
                    return this.columnRF_MPNZ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RF_NBCColumn {
                get {
                    return this.columnRF_NBC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProblemsRow this[int index] {
                get {
                    return ((ProblemsRow)(this.Rows[index]));
                }
            }
            
            public event ProblemsRowChangeEventHandler ProblemsRowChanging;
            
            public event ProblemsRowChangeEventHandler ProblemsRowChanged;
            
            public event ProblemsRowChangeEventHandler ProblemsRowDeleting;
            
            public event ProblemsRowChangeEventHandler ProblemsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProblemsRow(ProblemsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProblemsRow AddProblemsRow(
                        int Problem_ID, 
                        string Description, 
                        int IF_RR, 
                        int IF_NP, 
                        int IF_NE, 
                        int IF_NM, 
                        int IF_AR, 
                        int IF_AOR, 
                        int IF_ARC, 
                        int RF_NZV, 
                        int RF_NCV, 
                        int RF_NRW, 
                        int RF_TCM, 
                        int RF_TFC, 
                        int RF_MPNZ, 
                        int RF_NBC) {
                ProblemsRow rowProblemsRow = ((ProblemsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Description,
                        IF_RR,
                        IF_NP,
                        IF_NE,
                        IF_NM,
                        IF_AR,
                        IF_AOR,
                        IF_ARC,
                        RF_NZV,
                        RF_NCV,
                        RF_NRW,
                        RF_TCM,
                        RF_TFC,
                        RF_MPNZ,
                        RF_NBC};
                rowProblemsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProblemsRow);
                return rowProblemsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProblemsRow FindByProblem_ID(int Problem_ID) {
                return ((ProblemsRow)(this.Rows.Find(new object[] {
                            Problem_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProblemsDataTable cln = ((ProblemsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProblemsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnDescription = base.Columns["Description"];
                this.columnIF_RR = base.Columns["IF_RR"];
                this.columnIF_NP = base.Columns["IF_NP"];
                this.columnIF_NE = base.Columns["IF_NE"];
                this.columnIF_NM = base.Columns["IF_NM"];
                this.columnIF_AR = base.Columns["IF_AR"];
                this.columnIF_AOR = base.Columns["IF_AOR"];
                this.columnIF_ARC = base.Columns["IF_ARC"];
                this.columnRF_NZV = base.Columns["RF_NZV"];
                this.columnRF_NCV = base.Columns["RF_NCV"];
                this.columnRF_NRW = base.Columns["RF_NRW"];
                this.columnRF_TCM = base.Columns["RF_TCM"];
                this.columnRF_TFC = base.Columns["RF_TFC"];
                this.columnRF_MPNZ = base.Columns["RF_MPNZ"];
                this.columnRF_NBC = base.Columns["RF_NBC"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIF_RR = new global::System.Data.DataColumn("IF_RR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIF_RR);
                this.columnIF_NP = new global::System.Data.DataColumn("IF_NP", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIF_NP);
                this.columnIF_NE = new global::System.Data.DataColumn("IF_NE", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIF_NE);
                this.columnIF_NM = new global::System.Data.DataColumn("IF_NM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIF_NM);
                this.columnIF_AR = new global::System.Data.DataColumn("IF_AR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIF_AR);
                this.columnIF_AOR = new global::System.Data.DataColumn("IF_AOR", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIF_AOR);
                this.columnIF_ARC = new global::System.Data.DataColumn("IF_ARC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIF_ARC);
                this.columnRF_NZV = new global::System.Data.DataColumn("RF_NZV", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRF_NZV);
                this.columnRF_NCV = new global::System.Data.DataColumn("RF_NCV", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRF_NCV);
                this.columnRF_NRW = new global::System.Data.DataColumn("RF_NRW", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRF_NRW);
                this.columnRF_TCM = new global::System.Data.DataColumn("RF_TCM", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRF_TCM);
                this.columnRF_TFC = new global::System.Data.DataColumn("RF_TFC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRF_TFC);
                this.columnRF_MPNZ = new global::System.Data.DataColumn("RF_MPNZ", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRF_MPNZ);
                this.columnRF_NBC = new global::System.Data.DataColumn("RF_NBC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRF_NBC);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key5", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnProblem_ID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProblemsRow NewProblemsRow() {
                return ((ProblemsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProblemsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProblemsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProblemsRowChanged != null)) {
                    this.ProblemsRowChanged(this, new ProblemsRowChangeEvent(((ProblemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProblemsRowChanging != null)) {
                    this.ProblemsRowChanging(this, new ProblemsRowChangeEvent(((ProblemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProblemsRowDeleted != null)) {
                    this.ProblemsRowDeleted(this, new ProblemsRowChangeEvent(((ProblemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProblemsRowDeleting != null)) {
                    this.ProblemsRowDeleting(this, new ProblemsRowChangeEvent(((ProblemsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProblemsRow(ProblemsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProblemsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OperationsToFamiliesDataTable : global::System.Data.TypedTableBase<OperationsToFamiliesRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            private global::System.Data.DataColumn columnOperation_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsToFamiliesDataTable() {
                this.TableName = "OperationsToFamilies";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationsToFamiliesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OperationsToFamiliesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation_IDColumn {
                get {
                    return this.columnOperation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsToFamiliesRow this[int index] {
                get {
                    return ((OperationsToFamiliesRow)(this.Rows[index]));
                }
            }
            
            public event OperationsToFamiliesRowChangeEventHandler OperationsToFamiliesRowChanging;
            
            public event OperationsToFamiliesRowChangeEventHandler OperationsToFamiliesRowChanged;
            
            public event OperationsToFamiliesRowChangeEventHandler OperationsToFamiliesRowDeleting;
            
            public event OperationsToFamiliesRowChangeEventHandler OperationsToFamiliesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOperationsToFamiliesRow(OperationsToFamiliesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsToFamiliesRow AddOperationsToFamiliesRow(int Problem_ID, int Family_ID, int Operation_ID) {
                OperationsToFamiliesRow rowOperationsToFamiliesRow = ((OperationsToFamiliesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Family_ID,
                        Operation_ID};
                rowOperationsToFamiliesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOperationsToFamiliesRow);
                return rowOperationsToFamiliesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsToFamiliesRow FindByProblem_IDFamily_IDOperation_ID(int Problem_ID, int Family_ID, int Operation_ID) {
                return ((OperationsToFamiliesRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Family_ID,
                            Operation_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OperationsToFamiliesDataTable cln = ((OperationsToFamiliesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OperationsToFamiliesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
                this.columnOperation_ID = base.Columns["Operation_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnOperation_ID = new global::System.Data.DataColumn("Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_ID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key7", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnFamily_ID,
                                this.columnOperation_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnFamily_ID.AllowDBNull = false;
                this.columnOperation_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsToFamiliesRow NewOperationsToFamiliesRow() {
                return ((OperationsToFamiliesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OperationsToFamiliesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OperationsToFamiliesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OperationsToFamiliesRowChanged != null)) {
                    this.OperationsToFamiliesRowChanged(this, new OperationsToFamiliesRowChangeEvent(((OperationsToFamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OperationsToFamiliesRowChanging != null)) {
                    this.OperationsToFamiliesRowChanging(this, new OperationsToFamiliesRowChangeEvent(((OperationsToFamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OperationsToFamiliesRowDeleted != null)) {
                    this.OperationsToFamiliesRowDeleted(this, new OperationsToFamiliesRowChangeEvent(((OperationsToFamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OperationsToFamiliesRowDeleting != null)) {
                    this.OperationsToFamiliesRowDeleting(this, new OperationsToFamiliesRowChangeEvent(((OperationsToFamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOperationsToFamiliesRow(OperationsToFamiliesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OperationsToFamiliesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ModesDataTable : global::System.Data.TypedTableBase<ModesRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnOperation_ID;
            
            private global::System.Data.DataColumn columnMode_ID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesDataTable() {
                this.TableName = "Modes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ModesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation_IDColumn {
                get {
                    return this.columnOperation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mode_IDColumn {
                get {
                    return this.columnMode_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow this[int index] {
                get {
                    return ((ModesRow)(this.Rows[index]));
                }
            }
            
            public event ModesRowChangeEventHandler ModesRowChanging;
            
            public event ModesRowChangeEventHandler ModesRowChanged;
            
            public event ModesRowChangeEventHandler ModesRowDeleting;
            
            public event ModesRowChangeEventHandler ModesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddModesRow(ModesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow AddModesRow(int Problem_ID, int Operation_ID, int Mode_ID, string Name, string Description) {
                ModesRow rowModesRow = ((ModesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Operation_ID,
                        Mode_ID,
                        Name,
                        Description};
                rowModesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowModesRow);
                return rowModesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow FindByProblem_IDOperation_IDMode_ID(int Problem_ID, int Operation_ID, int Mode_ID) {
                return ((ModesRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Operation_ID,
                            Mode_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ModesDataTable cln = ((ModesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ModesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnOperation_ID = base.Columns["Operation_ID"];
                this.columnMode_ID = base.Columns["Mode_ID"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnOperation_ID = new global::System.Data.DataColumn("Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_ID);
                this.columnMode_ID = new global::System.Data.DataColumn("Mode_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMode_ID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key8", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnOperation_ID,
                                this.columnMode_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnOperation_ID.AllowDBNull = false;
                this.columnMode_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow NewModesRow() {
                return ((ModesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ModesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ModesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ModesRowChanged != null)) {
                    this.ModesRowChanged(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ModesRowChanging != null)) {
                    this.ModesRowChanging(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ModesRowDeleted != null)) {
                    this.ModesRowDeleted(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ModesRowDeleting != null)) {
                    this.ModesRowDeleting(this, new ModesRowChangeEvent(((ModesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveModesRow(ModesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ModesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResourcesDataTable : global::System.Data.TypedTableBase<ResourcesRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnResource_ID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnCapacity_Kr;
            
            private global::System.Data.DataColumn columnRelease_Date_tr1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesDataTable() {
                this.TableName = "Resources";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResourcesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ResourcesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Resource_IDColumn {
                get {
                    return this.columnResource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Capacity_KrColumn {
                get {
                    return this.columnCapacity_Kr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Release_Date_tr1Column {
                get {
                    return this.columnRelease_Date_tr1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow this[int index] {
                get {
                    return ((ResourcesRow)(this.Rows[index]));
                }
            }
            
            public event ResourcesRowChangeEventHandler ResourcesRowChanging;
            
            public event ResourcesRowChangeEventHandler ResourcesRowChanged;
            
            public event ResourcesRowChangeEventHandler ResourcesRowDeleting;
            
            public event ResourcesRowChangeEventHandler ResourcesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResourcesRow(ResourcesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow AddResourcesRow(int Problem_ID, int Resource_ID, string Name, int Capacity_Kr, int Release_Date_tr1) {
                ResourcesRow rowResourcesRow = ((ResourcesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Resource_ID,
                        Name,
                        Capacity_Kr,
                        Release_Date_tr1};
                rowResourcesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowResourcesRow);
                return rowResourcesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow FindByProblem_IDResource_ID(int Problem_ID, int Resource_ID) {
                return ((ResourcesRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Resource_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ResourcesDataTable cln = ((ResourcesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ResourcesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnResource_ID = base.Columns["Resource_ID"];
                this.columnName = base.Columns["Name"];
                this.columnCapacity_Kr = base.Columns["Capacity Kr"];
                this.columnRelease_Date_tr1 = base.Columns["Release_Date tr1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnResource_ID = new global::System.Data.DataColumn("Resource_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResource_ID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCapacity_Kr = new global::System.Data.DataColumn("Capacity Kr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCapacity_Kr);
                this.columnRelease_Date_tr1 = new global::System.Data.DataColumn("Release_Date tr1", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelease_Date_tr1);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key3", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnResource_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnResource_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow NewResourcesRow() {
                return ((ResourcesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ResourcesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ResourcesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResourcesRowChanged != null)) {
                    this.ResourcesRowChanged(this, new ResourcesRowChangeEvent(((ResourcesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResourcesRowChanging != null)) {
                    this.ResourcesRowChanging(this, new ResourcesRowChangeEvent(((ResourcesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResourcesRowDeleted != null)) {
                    this.ResourcesRowDeleted(this, new ResourcesRowChangeEvent(((ResourcesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResourcesRowDeleting != null)) {
                    this.ResourcesRowDeleting(this, new ResourcesRowChangeEvent(((ResourcesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResourcesRow(ResourcesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResourcesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FamilyCapacityOnResourceDataTable : global::System.Data.TypedTableBase<FamilyCapacityOnResourceRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            private global::System.Data.DataColumn columnResource_ID;
            
            private global::System.Data.DataColumn columnFamily_Capacity_kfr;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyCapacityOnResourceDataTable() {
                this.TableName = "FamilyCapacityOnResource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FamilyCapacityOnResourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FamilyCapacityOnResourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Resource_IDColumn {
                get {
                    return this.columnResource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_Capacity_kfrColumn {
                get {
                    return this.columnFamily_Capacity_kfr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyCapacityOnResourceRow this[int index] {
                get {
                    return ((FamilyCapacityOnResourceRow)(this.Rows[index]));
                }
            }
            
            public event FamilyCapacityOnResourceRowChangeEventHandler FamilyCapacityOnResourceRowChanging;
            
            public event FamilyCapacityOnResourceRowChangeEventHandler FamilyCapacityOnResourceRowChanged;
            
            public event FamilyCapacityOnResourceRowChangeEventHandler FamilyCapacityOnResourceRowDeleting;
            
            public event FamilyCapacityOnResourceRowChangeEventHandler FamilyCapacityOnResourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFamilyCapacityOnResourceRow(FamilyCapacityOnResourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyCapacityOnResourceRow AddFamilyCapacityOnResourceRow(int Problem_ID, int Family_ID, int Resource_ID, int Family_Capacity_kfr) {
                FamilyCapacityOnResourceRow rowFamilyCapacityOnResourceRow = ((FamilyCapacityOnResourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Family_ID,
                        Resource_ID,
                        Family_Capacity_kfr};
                rowFamilyCapacityOnResourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFamilyCapacityOnResourceRow);
                return rowFamilyCapacityOnResourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyCapacityOnResourceRow FindByProblem_IDFamily_IDResource_ID(int Problem_ID, int Family_ID, int Resource_ID) {
                return ((FamilyCapacityOnResourceRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Family_ID,
                            Resource_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FamilyCapacityOnResourceDataTable cln = ((FamilyCapacityOnResourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FamilyCapacityOnResourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
                this.columnResource_ID = base.Columns["Resource_ID"];
                this.columnFamily_Capacity_kfr = base.Columns["Family_Capacity kfr"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnResource_ID = new global::System.Data.DataColumn("Resource_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResource_ID);
                this.columnFamily_Capacity_kfr = new global::System.Data.DataColumn("Family_Capacity kfr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_Capacity_kfr);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key9", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnFamily_ID,
                                this.columnResource_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnFamily_ID.AllowDBNull = false;
                this.columnResource_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyCapacityOnResourceRow NewFamilyCapacityOnResourceRow() {
                return ((FamilyCapacityOnResourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FamilyCapacityOnResourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FamilyCapacityOnResourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FamilyCapacityOnResourceRowChanged != null)) {
                    this.FamilyCapacityOnResourceRowChanged(this, new FamilyCapacityOnResourceRowChangeEvent(((FamilyCapacityOnResourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FamilyCapacityOnResourceRowChanging != null)) {
                    this.FamilyCapacityOnResourceRowChanging(this, new FamilyCapacityOnResourceRowChangeEvent(((FamilyCapacityOnResourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FamilyCapacityOnResourceRowDeleted != null)) {
                    this.FamilyCapacityOnResourceRowDeleted(this, new FamilyCapacityOnResourceRowChangeEvent(((FamilyCapacityOnResourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FamilyCapacityOnResourceRowDeleting != null)) {
                    this.FamilyCapacityOnResourceRowDeleting(this, new FamilyCapacityOnResourceRowChangeEvent(((FamilyCapacityOnResourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFamilyCapacityOnResourceRow(FamilyCapacityOnResourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FamilyCapacityOnResourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PrecedenceDataTable : global::System.Data.TypedTableBase<PrecedenceRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            private global::System.Data.DataColumn columnPrevious_Operation_ID;
            
            private global::System.Data.DataColumn columnSubsequent_Operation_ID;
            
            private global::System.Data.DataColumn columnMinLfi1i2;
            
            private global::System.Data.DataColumn columnMaxLfi1i2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrecedenceDataTable() {
                this.TableName = "Precedence";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrecedenceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PrecedenceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Previous_Operation_IDColumn {
                get {
                    return this.columnPrevious_Operation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Subsequent_Operation_IDColumn {
                get {
                    return this.columnSubsequent_Operation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinLfi1i2Column {
                get {
                    return this.columnMinLfi1i2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxLfi1i2Column {
                get {
                    return this.columnMaxLfi1i2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrecedenceRow this[int index] {
                get {
                    return ((PrecedenceRow)(this.Rows[index]));
                }
            }
            
            public event PrecedenceRowChangeEventHandler PrecedenceRowChanging;
            
            public event PrecedenceRowChangeEventHandler PrecedenceRowChanged;
            
            public event PrecedenceRowChangeEventHandler PrecedenceRowDeleting;
            
            public event PrecedenceRowChangeEventHandler PrecedenceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPrecedenceRow(PrecedenceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrecedenceRow AddPrecedenceRow(int Problem_ID, int Family_ID, int Previous_Operation_ID, int Subsequent_Operation_ID, int MinLfi1i2, int MaxLfi1i2) {
                PrecedenceRow rowPrecedenceRow = ((PrecedenceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Family_ID,
                        Previous_Operation_ID,
                        Subsequent_Operation_ID,
                        MinLfi1i2,
                        MaxLfi1i2};
                rowPrecedenceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPrecedenceRow);
                return rowPrecedenceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrecedenceRow FindByProblem_IDFamily_IDPrevious_Operation_IDSubsequent_Operation_ID(int Problem_ID, int Family_ID, int Previous_Operation_ID, int Subsequent_Operation_ID) {
                return ((PrecedenceRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Family_ID,
                            Previous_Operation_ID,
                            Subsequent_Operation_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PrecedenceDataTable cln = ((PrecedenceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PrecedenceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
                this.columnPrevious_Operation_ID = base.Columns["Previous_Operation_ID"];
                this.columnSubsequent_Operation_ID = base.Columns["Subsequent_Operation_ID"];
                this.columnMinLfi1i2 = base.Columns["MinLfi1i2"];
                this.columnMaxLfi1i2 = base.Columns["MaxLfi1i2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnPrevious_Operation_ID = new global::System.Data.DataColumn("Previous_Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrevious_Operation_ID);
                this.columnSubsequent_Operation_ID = new global::System.Data.DataColumn("Subsequent_Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubsequent_Operation_ID);
                this.columnMinLfi1i2 = new global::System.Data.DataColumn("MinLfi1i2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinLfi1i2);
                this.columnMaxLfi1i2 = new global::System.Data.DataColumn("MaxLfi1i2", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxLfi1i2);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key10", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnFamily_ID,
                                this.columnPrevious_Operation_ID,
                                this.columnSubsequent_Operation_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnFamily_ID.AllowDBNull = false;
                this.columnPrevious_Operation_ID.AllowDBNull = false;
                this.columnSubsequent_Operation_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrecedenceRow NewPrecedenceRow() {
                return ((PrecedenceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PrecedenceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PrecedenceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PrecedenceRowChanged != null)) {
                    this.PrecedenceRowChanged(this, new PrecedenceRowChangeEvent(((PrecedenceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PrecedenceRowChanging != null)) {
                    this.PrecedenceRowChanging(this, new PrecedenceRowChangeEvent(((PrecedenceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PrecedenceRowDeleted != null)) {
                    this.PrecedenceRowDeleted(this, new PrecedenceRowChangeEvent(((PrecedenceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PrecedenceRowDeleting != null)) {
                    this.PrecedenceRowDeleting(this, new PrecedenceRowChangeEvent(((PrecedenceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePrecedenceRow(PrecedenceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PrecedenceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JobsDataTable : global::System.Data.TypedTableBase<JobsRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            private global::System.Data.DataColumn columnJob_ID;
            
            private global::System.Data.DataColumn columnUnits;
            
            private global::System.Data.DataColumn columnRelease_Date;
            
            private global::System.Data.DataColumn columnRelease_D;
            
            private global::System.Data.DataColumn columnDue_Date;
            
            private global::System.Data.DataColumn columnWeight;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobsDataTable() {
                this.TableName = "Jobs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JobsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Job_IDColumn {
                get {
                    return this.columnJob_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UnitsColumn {
                get {
                    return this.columnUnits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Release_DateColumn {
                get {
                    return this.columnRelease_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Release_DColumn {
                get {
                    return this.columnRelease_D;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Due_DateColumn {
                get {
                    return this.columnDue_Date;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WeightColumn {
                get {
                    return this.columnWeight;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobsRow this[int index] {
                get {
                    return ((JobsRow)(this.Rows[index]));
                }
            }
            
            public event JobsRowChangeEventHandler JobsRowChanging;
            
            public event JobsRowChangeEventHandler JobsRowChanged;
            
            public event JobsRowChangeEventHandler JobsRowDeleting;
            
            public event JobsRowChangeEventHandler JobsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJobsRow(JobsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobsRow AddJobsRow(int Problem_ID, int Family_ID, int Job_ID, int Units, int Release_Date, byte[] Release_D, int Due_Date, int Weight) {
                JobsRow rowJobsRow = ((JobsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Family_ID,
                        Job_ID,
                        Units,
                        Release_Date,
                        Release_D,
                        Due_Date,
                        Weight};
                rowJobsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJobsRow);
                return rowJobsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobsRow FindByProblem_IDFamily_IDJob_ID(int Problem_ID, int Family_ID, int Job_ID) {
                return ((JobsRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Family_ID,
                            Job_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JobsDataTable cln = ((JobsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JobsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
                this.columnJob_ID = base.Columns["Job_ID"];
                this.columnUnits = base.Columns["Units"];
                this.columnRelease_Date = base.Columns["Release_Date"];
                this.columnRelease_D = base.Columns["Release_D"];
                this.columnDue_Date = base.Columns["Due_Date"];
                this.columnWeight = base.Columns["Weight"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnJob_ID = new global::System.Data.DataColumn("Job_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJob_ID);
                this.columnUnits = new global::System.Data.DataColumn("Units", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnits);
                this.columnRelease_Date = new global::System.Data.DataColumn("Release_Date", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelease_Date);
                this.columnRelease_D = new global::System.Data.DataColumn("Release_D", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRelease_D);
                this.columnDue_Date = new global::System.Data.DataColumn("Due_Date", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDue_Date);
                this.columnWeight = new global::System.Data.DataColumn("Weight", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWeight);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key6", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnFamily_ID,
                                this.columnJob_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnFamily_ID.AllowDBNull = false;
                this.columnJob_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobsRow NewJobsRow() {
                return ((JobsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JobsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JobsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JobsRowChanged != null)) {
                    this.JobsRowChanged(this, new JobsRowChangeEvent(((JobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JobsRowChanging != null)) {
                    this.JobsRowChanging(this, new JobsRowChangeEvent(((JobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JobsRowDeleted != null)) {
                    this.JobsRowDeleted(this, new JobsRowChangeEvent(((JobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JobsRowDeleting != null)) {
                    this.JobsRowDeleting(this, new JobsRowChangeEvent(((JobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJobsRow(JobsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JobsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LoadingTimesDataTable : global::System.Data.TypedTableBase<LoadingTimesRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnOperation_ID;
            
            private global::System.Data.DataColumn columnResource_ID;
            
            private global::System.Data.DataColumn columnMode_ID;
            
            private global::System.Data.DataColumn columnDLimr;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadingTimesDataTable() {
                this.TableName = "LoadingTimes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadingTimesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LoadingTimesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation_IDColumn {
                get {
                    return this.columnOperation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Resource_IDColumn {
                get {
                    return this.columnResource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mode_IDColumn {
                get {
                    return this.columnMode_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DLimrColumn {
                get {
                    return this.columnDLimr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadingTimesRow this[int index] {
                get {
                    return ((LoadingTimesRow)(this.Rows[index]));
                }
            }
            
            public event LoadingTimesRowChangeEventHandler LoadingTimesRowChanging;
            
            public event LoadingTimesRowChangeEventHandler LoadingTimesRowChanged;
            
            public event LoadingTimesRowChangeEventHandler LoadingTimesRowDeleting;
            
            public event LoadingTimesRowChangeEventHandler LoadingTimesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLoadingTimesRow(LoadingTimesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadingTimesRow AddLoadingTimesRow(int Problem_ID, int Operation_ID, int Resource_ID, int Mode_ID, int DLimr) {
                LoadingTimesRow rowLoadingTimesRow = ((LoadingTimesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Operation_ID,
                        Resource_ID,
                        Mode_ID,
                        DLimr};
                rowLoadingTimesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLoadingTimesRow);
                return rowLoadingTimesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadingTimesRow FindByProblem_IDOperation_IDResource_IDMode_ID(int Problem_ID, int Operation_ID, int Resource_ID, int Mode_ID) {
                return ((LoadingTimesRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Operation_ID,
                            Resource_ID,
                            Mode_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LoadingTimesDataTable cln = ((LoadingTimesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LoadingTimesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnOperation_ID = base.Columns["Operation_ID"];
                this.columnResource_ID = base.Columns["Resource_ID"];
                this.columnMode_ID = base.Columns["Mode_ID"];
                this.columnDLimr = base.Columns["DLimr"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnOperation_ID = new global::System.Data.DataColumn("Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_ID);
                this.columnResource_ID = new global::System.Data.DataColumn("Resource_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResource_ID);
                this.columnMode_ID = new global::System.Data.DataColumn("Mode_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMode_ID);
                this.columnDLimr = new global::System.Data.DataColumn("DLimr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDLimr);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key11", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnOperation_ID,
                                this.columnResource_ID,
                                this.columnMode_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnOperation_ID.AllowDBNull = false;
                this.columnResource_ID.AllowDBNull = false;
                this.columnMode_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadingTimesRow NewLoadingTimesRow() {
                return ((LoadingTimesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LoadingTimesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LoadingTimesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LoadingTimesRowChanged != null)) {
                    this.LoadingTimesRowChanged(this, new LoadingTimesRowChangeEvent(((LoadingTimesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LoadingTimesRowChanging != null)) {
                    this.LoadingTimesRowChanging(this, new LoadingTimesRowChangeEvent(((LoadingTimesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LoadingTimesRowDeleted != null)) {
                    this.LoadingTimesRowDeleted(this, new LoadingTimesRowChangeEvent(((LoadingTimesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LoadingTimesRowDeleting != null)) {
                    this.LoadingTimesRowDeleting(this, new LoadingTimesRowChangeEvent(((LoadingTimesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLoadingTimesRow(LoadingTimesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LoadingTimesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConstantDelaysDataTable : global::System.Data.TypedTableBase<ConstantDelaysRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnOperation1_ID;
            
            private global::System.Data.DataColumn columnMode1_ID;
            
            private global::System.Data.DataColumn columnOperation2_ID;
            
            private global::System.Data.DataColumn columnMode2_ID;
            
            private global::System.Data.DataColumn columnResource_ID;
            
            private global::System.Data.DataColumn columndi1m1i2m2r;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantDelaysDataTable() {
                this.TableName = "ConstantDelays";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConstantDelaysDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ConstantDelaysDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation1_IDColumn {
                get {
                    return this.columnOperation1_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mode1_IDColumn {
                get {
                    return this.columnMode1_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation2_IDColumn {
                get {
                    return this.columnOperation2_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mode2_IDColumn {
                get {
                    return this.columnMode2_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Resource_IDColumn {
                get {
                    return this.columnResource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn di1m1i2m2rColumn {
                get {
                    return this.columndi1m1i2m2r;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantDelaysRow this[int index] {
                get {
                    return ((ConstantDelaysRow)(this.Rows[index]));
                }
            }
            
            public event ConstantDelaysRowChangeEventHandler ConstantDelaysRowChanging;
            
            public event ConstantDelaysRowChangeEventHandler ConstantDelaysRowChanged;
            
            public event ConstantDelaysRowChangeEventHandler ConstantDelaysRowDeleting;
            
            public event ConstantDelaysRowChangeEventHandler ConstantDelaysRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConstantDelaysRow(ConstantDelaysRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantDelaysRow AddConstantDelaysRow(int Problem_ID, int Operation1_ID, int Mode1_ID, int Operation2_ID, int Mode2_ID, int Resource_ID, int di1m1i2m2r) {
                ConstantDelaysRow rowConstantDelaysRow = ((ConstantDelaysRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Operation1_ID,
                        Mode1_ID,
                        Operation2_ID,
                        Mode2_ID,
                        Resource_ID,
                        di1m1i2m2r};
                rowConstantDelaysRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConstantDelaysRow);
                return rowConstantDelaysRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantDelaysRow FindByProblem_IDOperation1_IDMode1_IDOperation2_IDMode2_IDResource_ID(int Problem_ID, int Operation1_ID, int Mode1_ID, int Operation2_ID, int Mode2_ID, int Resource_ID) {
                return ((ConstantDelaysRow)(this.Rows.Find(new object[] {
                            Problem_ID,
                            Operation1_ID,
                            Mode1_ID,
                            Operation2_ID,
                            Mode2_ID,
                            Resource_ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConstantDelaysDataTable cln = ((ConstantDelaysDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConstantDelaysDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnOperation1_ID = base.Columns["Operation1_ID"];
                this.columnMode1_ID = base.Columns["Mode1_ID"];
                this.columnOperation2_ID = base.Columns["Operation2_ID"];
                this.columnMode2_ID = base.Columns["Mode2_ID"];
                this.columnResource_ID = base.Columns["Resource_ID"];
                this.columndi1m1i2m2r = base.Columns["di1m1i2m2r"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnOperation1_ID = new global::System.Data.DataColumn("Operation1_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation1_ID);
                this.columnMode1_ID = new global::System.Data.DataColumn("Mode1_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMode1_ID);
                this.columnOperation2_ID = new global::System.Data.DataColumn("Operation2_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation2_ID);
                this.columnMode2_ID = new global::System.Data.DataColumn("Mode2_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMode2_ID);
                this.columnResource_ID = new global::System.Data.DataColumn("Resource_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResource_ID);
                this.columndi1m1i2m2r = new global::System.Data.DataColumn("di1m1i2m2r", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndi1m1i2m2r);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Dataset1Key12", new global::System.Data.DataColumn[] {
                                this.columnProblem_ID,
                                this.columnOperation1_ID,
                                this.columnMode1_ID,
                                this.columnOperation2_ID,
                                this.columnMode2_ID,
                                this.columnResource_ID}, true));
                this.columnProblem_ID.AllowDBNull = false;
                this.columnOperation1_ID.AllowDBNull = false;
                this.columnMode1_ID.AllowDBNull = false;
                this.columnOperation2_ID.AllowDBNull = false;
                this.columnMode2_ID.AllowDBNull = false;
                this.columnResource_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantDelaysRow NewConstantDelaysRow() {
                return ((ConstantDelaysRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConstantDelaysRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConstantDelaysRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConstantDelaysRowChanged != null)) {
                    this.ConstantDelaysRowChanged(this, new ConstantDelaysRowChangeEvent(((ConstantDelaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConstantDelaysRowChanging != null)) {
                    this.ConstantDelaysRowChanging(this, new ConstantDelaysRowChangeEvent(((ConstantDelaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConstantDelaysRowDeleted != null)) {
                    this.ConstantDelaysRowDeleted(this, new ConstantDelaysRowChangeEvent(((ConstantDelaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConstantDelaysRowDeleting != null)) {
                    this.ConstantDelaysRowDeleting(this, new ConstantDelaysRowChangeEvent(((ConstantDelaysRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConstantDelaysRow(ConstantDelaysRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConstantDelaysDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Exclusive_FamiliesDataTable : global::System.Data.TypedTableBase<Exclusive_FamiliesRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnOperation_ID;
            
            private global::System.Data.DataColumn columnMode_ID;
            
            private global::System.Data.DataColumn columnResource_ID;
            
            private global::System.Data.DataColumn columnExcusive_Families_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_FamiliesDataTable() {
                this.TableName = "Exclusive_Families";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Exclusive_FamiliesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Exclusive_FamiliesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation_IDColumn {
                get {
                    return this.columnOperation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mode_IDColumn {
                get {
                    return this.columnMode_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Resource_IDColumn {
                get {
                    return this.columnResource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Excusive_Families_IDColumn {
                get {
                    return this.columnExcusive_Families_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_FamiliesRow this[int index] {
                get {
                    return ((Exclusive_FamiliesRow)(this.Rows[index]));
                }
            }
            
            public event Exclusive_FamiliesRowChangeEventHandler Exclusive_FamiliesRowChanging;
            
            public event Exclusive_FamiliesRowChangeEventHandler Exclusive_FamiliesRowChanged;
            
            public event Exclusive_FamiliesRowChangeEventHandler Exclusive_FamiliesRowDeleting;
            
            public event Exclusive_FamiliesRowChangeEventHandler Exclusive_FamiliesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExclusive_FamiliesRow(Exclusive_FamiliesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_FamiliesRow AddExclusive_FamiliesRow(int Problem_ID, int Operation_ID, int Mode_ID, int Resource_ID, int Excusive_Families_ID, int Family_ID) {
                Exclusive_FamiliesRow rowExclusive_FamiliesRow = ((Exclusive_FamiliesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Operation_ID,
                        Mode_ID,
                        Resource_ID,
                        Excusive_Families_ID,
                        Family_ID};
                rowExclusive_FamiliesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExclusive_FamiliesRow);
                return rowExclusive_FamiliesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Exclusive_FamiliesDataTable cln = ((Exclusive_FamiliesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Exclusive_FamiliesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnOperation_ID = base.Columns["Operation_ID"];
                this.columnMode_ID = base.Columns["Mode_ID"];
                this.columnResource_ID = base.Columns["Resource_ID"];
                this.columnExcusive_Families_ID = base.Columns["Excusive_Families_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnOperation_ID = new global::System.Data.DataColumn("Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_ID);
                this.columnMode_ID = new global::System.Data.DataColumn("Mode_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMode_ID);
                this.columnResource_ID = new global::System.Data.DataColumn("Resource_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResource_ID);
                this.columnExcusive_Families_ID = new global::System.Data.DataColumn("Excusive_Families_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExcusive_Families_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnProblem_ID.AllowDBNull = false;
                this.columnOperation_ID.AllowDBNull = false;
                this.columnMode_ID.AllowDBNull = false;
                this.columnResource_ID.AllowDBNull = false;
                this.columnExcusive_Families_ID.AllowDBNull = false;
                this.columnFamily_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_FamiliesRow NewExclusive_FamiliesRow() {
                return ((Exclusive_FamiliesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Exclusive_FamiliesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Exclusive_FamiliesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Exclusive_FamiliesRowChanged != null)) {
                    this.Exclusive_FamiliesRowChanged(this, new Exclusive_FamiliesRowChangeEvent(((Exclusive_FamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Exclusive_FamiliesRowChanging != null)) {
                    this.Exclusive_FamiliesRowChanging(this, new Exclusive_FamiliesRowChangeEvent(((Exclusive_FamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Exclusive_FamiliesRowDeleted != null)) {
                    this.Exclusive_FamiliesRowDeleted(this, new Exclusive_FamiliesRowChangeEvent(((Exclusive_FamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Exclusive_FamiliesRowDeleting != null)) {
                    this.Exclusive_FamiliesRowDeleting(this, new Exclusive_FamiliesRowChangeEvent(((Exclusive_FamiliesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExclusive_FamiliesRow(Exclusive_FamiliesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Exclusive_FamiliesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Exclusive_JobsDataTable : global::System.Data.TypedTableBase<Exclusive_JobsRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            private global::System.Data.DataColumn columnOperation_ID;
            
            private global::System.Data.DataColumn columnMode_ID;
            
            private global::System.Data.DataColumn columnResource_ID;
            
            private global::System.Data.DataColumn columnExclusive_Jobs_ID;
            
            private global::System.Data.DataColumn columnJob_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_JobsDataTable() {
                this.TableName = "Exclusive_Jobs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Exclusive_JobsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected Exclusive_JobsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation_IDColumn {
                get {
                    return this.columnOperation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mode_IDColumn {
                get {
                    return this.columnMode_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Resource_IDColumn {
                get {
                    return this.columnResource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Exclusive_Jobs_IDColumn {
                get {
                    return this.columnExclusive_Jobs_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Job_IDColumn {
                get {
                    return this.columnJob_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_JobsRow this[int index] {
                get {
                    return ((Exclusive_JobsRow)(this.Rows[index]));
                }
            }
            
            public event Exclusive_JobsRowChangeEventHandler Exclusive_JobsRowChanging;
            
            public event Exclusive_JobsRowChangeEventHandler Exclusive_JobsRowChanged;
            
            public event Exclusive_JobsRowChangeEventHandler Exclusive_JobsRowDeleting;
            
            public event Exclusive_JobsRowChangeEventHandler Exclusive_JobsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExclusive_JobsRow(Exclusive_JobsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_JobsRow AddExclusive_JobsRow(int Problem_ID, int Family_ID, int Operation_ID, int Mode_ID, int Resource_ID, int Exclusive_Jobs_ID, int Job_ID) {
                Exclusive_JobsRow rowExclusive_JobsRow = ((Exclusive_JobsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Family_ID,
                        Operation_ID,
                        Mode_ID,
                        Resource_ID,
                        Exclusive_Jobs_ID,
                        Job_ID};
                rowExclusive_JobsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExclusive_JobsRow);
                return rowExclusive_JobsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                Exclusive_JobsDataTable cln = ((Exclusive_JobsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Exclusive_JobsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
                this.columnOperation_ID = base.Columns["Operation_ID"];
                this.columnMode_ID = base.Columns["Mode_ID"];
                this.columnResource_ID = base.Columns["Resource_ID"];
                this.columnExclusive_Jobs_ID = base.Columns["Exclusive_Jobs_ID"];
                this.columnJob_ID = base.Columns["Job_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnOperation_ID = new global::System.Data.DataColumn("Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_ID);
                this.columnMode_ID = new global::System.Data.DataColumn("Mode_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMode_ID);
                this.columnResource_ID = new global::System.Data.DataColumn("Resource_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResource_ID);
                this.columnExclusive_Jobs_ID = new global::System.Data.DataColumn("Exclusive_Jobs_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExclusive_Jobs_ID);
                this.columnJob_ID = new global::System.Data.DataColumn("Job_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJob_ID);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_JobsRow NewExclusive_JobsRow() {
                return ((Exclusive_JobsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Exclusive_JobsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(Exclusive_JobsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Exclusive_JobsRowChanged != null)) {
                    this.Exclusive_JobsRowChanged(this, new Exclusive_JobsRowChangeEvent(((Exclusive_JobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Exclusive_JobsRowChanging != null)) {
                    this.Exclusive_JobsRowChanging(this, new Exclusive_JobsRowChangeEvent(((Exclusive_JobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Exclusive_JobsRowDeleted != null)) {
                    this.Exclusive_JobsRowDeleted(this, new Exclusive_JobsRowChangeEvent(((Exclusive_JobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Exclusive_JobsRowDeleting != null)) {
                    this.Exclusive_JobsRowDeleting(this, new Exclusive_JobsRowChangeEvent(((Exclusive_JobsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExclusive_JobsRow(Exclusive_JobsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Exclusive_JobsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ComplementariesDataTable : global::System.Data.TypedTableBase<ComplementariesRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            private global::System.Data.DataColumn columnOperation_ID;
            
            private global::System.Data.DataColumn columnMode_ID;
            
            private global::System.Data.DataColumn columnComplementary_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplementariesDataTable() {
                this.TableName = "Complementaries";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComplementariesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ComplementariesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation_IDColumn {
                get {
                    return this.columnOperation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mode_IDColumn {
                get {
                    return this.columnMode_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Complementary_IDColumn {
                get {
                    return this.columnComplementary_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplementariesRow this[int index] {
                get {
                    return ((ComplementariesRow)(this.Rows[index]));
                }
            }
            
            public event ComplementariesRowChangeEventHandler ComplementariesRowChanging;
            
            public event ComplementariesRowChangeEventHandler ComplementariesRowChanged;
            
            public event ComplementariesRowChangeEventHandler ComplementariesRowDeleting;
            
            public event ComplementariesRowChangeEventHandler ComplementariesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddComplementariesRow(ComplementariesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplementariesRow AddComplementariesRow(int Problem_ID, int Family_ID, int Operation_ID, int Mode_ID, int Complementary_ID) {
                ComplementariesRow rowComplementariesRow = ((ComplementariesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Family_ID,
                        Operation_ID,
                        Mode_ID,
                        Complementary_ID};
                rowComplementariesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowComplementariesRow);
                return rowComplementariesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ComplementariesDataTable cln = ((ComplementariesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ComplementariesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
                this.columnOperation_ID = base.Columns["Operation_ID"];
                this.columnMode_ID = base.Columns["Mode_ID"];
                this.columnComplementary_ID = base.Columns["Complementary_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnOperation_ID = new global::System.Data.DataColumn("Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_ID);
                this.columnMode_ID = new global::System.Data.DataColumn("Mode_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMode_ID);
                this.columnComplementary_ID = new global::System.Data.DataColumn("Complementary_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComplementary_ID);
                this.columnProblem_ID.AllowDBNull = false;
                this.columnFamily_ID.AllowDBNull = false;
                this.columnOperation_ID.AllowDBNull = false;
                this.columnMode_ID.AllowDBNull = false;
                this.columnComplementary_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplementariesRow NewComplementariesRow() {
                return ((ComplementariesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ComplementariesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ComplementariesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ComplementariesRowChanged != null)) {
                    this.ComplementariesRowChanged(this, new ComplementariesRowChangeEvent(((ComplementariesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ComplementariesRowChanging != null)) {
                    this.ComplementariesRowChanging(this, new ComplementariesRowChangeEvent(((ComplementariesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ComplementariesRowDeleted != null)) {
                    this.ComplementariesRowDeleted(this, new ComplementariesRowChangeEvent(((ComplementariesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ComplementariesRowDeleting != null)) {
                    this.ComplementariesRowDeleting(this, new ComplementariesRowChangeEvent(((ComplementariesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveComplementariesRow(ComplementariesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ComplementariesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ExclusivesDataTable : global::System.Data.TypedTableBase<ExclusivesRow> {
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnOperation_ID;
            
            private global::System.Data.DataColumn columnMode_ID;
            
            private global::System.Data.DataColumn columnExclusive_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExclusivesDataTable() {
                this.TableName = "Exclusives";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExclusivesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ExclusivesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Operation_IDColumn {
                get {
                    return this.columnOperation_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mode_IDColumn {
                get {
                    return this.columnMode_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Exclusive_IDColumn {
                get {
                    return this.columnExclusive_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExclusivesRow this[int index] {
                get {
                    return ((ExclusivesRow)(this.Rows[index]));
                }
            }
            
            public event ExclusivesRowChangeEventHandler ExclusivesRowChanging;
            
            public event ExclusivesRowChangeEventHandler ExclusivesRowChanged;
            
            public event ExclusivesRowChangeEventHandler ExclusivesRowDeleting;
            
            public event ExclusivesRowChangeEventHandler ExclusivesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddExclusivesRow(ExclusivesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExclusivesRow AddExclusivesRow(int Problem_ID, int Operation_ID, int Mode_ID, int Exclusive_ID, int Family_ID) {
                ExclusivesRow rowExclusivesRow = ((ExclusivesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Problem_ID,
                        Operation_ID,
                        Mode_ID,
                        Exclusive_ID,
                        Family_ID};
                rowExclusivesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowExclusivesRow);
                return rowExclusivesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ExclusivesDataTable cln = ((ExclusivesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ExclusivesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnOperation_ID = base.Columns["Operation_ID"];
                this.columnMode_ID = base.Columns["Mode_ID"];
                this.columnExclusive_ID = base.Columns["Exclusive_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnOperation_ID = new global::System.Data.DataColumn("Operation_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperation_ID);
                this.columnMode_ID = new global::System.Data.DataColumn("Mode_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMode_ID);
                this.columnExclusive_ID = new global::System.Data.DataColumn("Exclusive_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExclusive_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnProblem_ID.AllowDBNull = false;
                this.columnOperation_ID.AllowDBNull = false;
                this.columnMode_ID.AllowDBNull = false;
                this.columnExclusive_ID.AllowDBNull = false;
                this.columnFamily_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExclusivesRow NewExclusivesRow() {
                return ((ExclusivesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ExclusivesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ExclusivesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ExclusivesRowChanged != null)) {
                    this.ExclusivesRowChanged(this, new ExclusivesRowChangeEvent(((ExclusivesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ExclusivesRowChanging != null)) {
                    this.ExclusivesRowChanging(this, new ExclusivesRowChangeEvent(((ExclusivesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ExclusivesRowDeleted != null)) {
                    this.ExclusivesRowDeleted(this, new ExclusivesRowChangeEvent(((ExclusivesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ExclusivesRowDeleting != null)) {
                    this.ExclusivesRowDeleting(this, new ExclusivesRowChangeEvent(((ExclusivesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveExclusivesRow(ExclusivesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ExclusivesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StatisticsSolutionsDataTable : global::System.Data.TypedTableBase<StatisticsSolutionsRow> {
            
            private global::System.Data.DataColumn columnSolution_ID;
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnPopulation_Size;
            
            private global::System.Data.DataColumn columnStart_Time;
            
            private global::System.Data.DataColumn columnFinish_Time;
            
            private global::System.Data.DataColumn columnMutation_precent;
            
            private global::System.Data.DataColumn columnSolution_Name;
            
            private global::System.Data.DataColumn columnSeletion_Type;
            
            private global::System.Data.DataColumn columnCrossover_Type;
            
            private global::System.Data.DataColumn columnFirst_Population;
            
            private global::System.Data.DataColumn columnIteration_Number;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsSolutionsDataTable() {
                this.TableName = "StatisticsSolutions";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatisticsSolutionsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StatisticsSolutionsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Solution_IDColumn {
                get {
                    return this.columnSolution_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Population_SizeColumn {
                get {
                    return this.columnPopulation_Size;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Start_TimeColumn {
                get {
                    return this.columnStart_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Finish_TimeColumn {
                get {
                    return this.columnFinish_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Mutation_precentColumn {
                get {
                    return this.columnMutation_precent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Solution_NameColumn {
                get {
                    return this.columnSolution_Name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Seletion_TypeColumn {
                get {
                    return this.columnSeletion_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Crossover_TypeColumn {
                get {
                    return this.columnCrossover_Type;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn First_PopulationColumn {
                get {
                    return this.columnFirst_Population;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Iteration_NumberColumn {
                get {
                    return this.columnIteration_Number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsSolutionsRow this[int index] {
                get {
                    return ((StatisticsSolutionsRow)(this.Rows[index]));
                }
            }
            
            public event StatisticsSolutionsRowChangeEventHandler StatisticsSolutionsRowChanging;
            
            public event StatisticsSolutionsRowChangeEventHandler StatisticsSolutionsRowChanged;
            
            public event StatisticsSolutionsRowChangeEventHandler StatisticsSolutionsRowDeleting;
            
            public event StatisticsSolutionsRowChangeEventHandler StatisticsSolutionsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStatisticsSolutionsRow(StatisticsSolutionsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsSolutionsRow AddStatisticsSolutionsRow(int Solution_ID, ProblemsRow parentProblemsRowByProblems_Solutions, int Population_Size, string Start_Time, string Finish_Time, string Mutation_precent, string Solution_Name, string Seletion_Type, string Crossover_Type, string First_Population, int Iteration_Number) {
                StatisticsSolutionsRow rowStatisticsSolutionsRow = ((StatisticsSolutionsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Solution_ID,
                        null,
                        Population_Size,
                        Start_Time,
                        Finish_Time,
                        Mutation_precent,
                        Solution_Name,
                        Seletion_Type,
                        Crossover_Type,
                        First_Population,
                        Iteration_Number};
                if ((parentProblemsRowByProblems_Solutions != null)) {
                    columnValuesArray[1] = parentProblemsRowByProblems_Solutions[0];
                }
                rowStatisticsSolutionsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStatisticsSolutionsRow);
                return rowStatisticsSolutionsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StatisticsSolutionsDataTable cln = ((StatisticsSolutionsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StatisticsSolutionsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSolution_ID = base.Columns["Solution_ID"];
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnPopulation_Size = base.Columns["Population_Size"];
                this.columnStart_Time = base.Columns["Start_Time"];
                this.columnFinish_Time = base.Columns["Finish_Time"];
                this.columnMutation_precent = base.Columns["Mutation_precent"];
                this.columnSolution_Name = base.Columns["Solution_Name"];
                this.columnSeletion_Type = base.Columns["Seletion_Type"];
                this.columnCrossover_Type = base.Columns["Crossover_Type"];
                this.columnFirst_Population = base.Columns["First_Population"];
                this.columnIteration_Number = base.Columns["Iteration_Number"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSolution_ID = new global::System.Data.DataColumn("Solution_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSolution_ID);
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnPopulation_Size = new global::System.Data.DataColumn("Population_Size", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPopulation_Size);
                this.columnStart_Time = new global::System.Data.DataColumn("Start_Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStart_Time);
                this.columnFinish_Time = new global::System.Data.DataColumn("Finish_Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinish_Time);
                this.columnMutation_precent = new global::System.Data.DataColumn("Mutation_precent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMutation_precent);
                this.columnSolution_Name = new global::System.Data.DataColumn("Solution_Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSolution_Name);
                this.columnSeletion_Type = new global::System.Data.DataColumn("Seletion_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSeletion_Type);
                this.columnCrossover_Type = new global::System.Data.DataColumn("Crossover_Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCrossover_Type);
                this.columnFirst_Population = new global::System.Data.DataColumn("First_Population", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirst_Population);
                this.columnIteration_Number = new global::System.Data.DataColumn("Iteration_Number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIteration_Number);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("SolutionsKey1", new global::System.Data.DataColumn[] {
                                this.columnSolution_ID,
                                this.columnProblem_ID}, false));
                this.columnSolution_ID.AllowDBNull = false;
                this.columnProblem_ID.AllowDBNull = false;
                this.columnPopulation_Size.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsSolutionsRow NewStatisticsSolutionsRow() {
                return ((StatisticsSolutionsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StatisticsSolutionsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StatisticsSolutionsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StatisticsSolutionsRowChanged != null)) {
                    this.StatisticsSolutionsRowChanged(this, new StatisticsSolutionsRowChangeEvent(((StatisticsSolutionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StatisticsSolutionsRowChanging != null)) {
                    this.StatisticsSolutionsRowChanging(this, new StatisticsSolutionsRowChangeEvent(((StatisticsSolutionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StatisticsSolutionsRowDeleted != null)) {
                    this.StatisticsSolutionsRowDeleted(this, new StatisticsSolutionsRowChangeEvent(((StatisticsSolutionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StatisticsSolutionsRowDeleting != null)) {
                    this.StatisticsSolutionsRowDeleting(this, new StatisticsSolutionsRowChangeEvent(((StatisticsSolutionsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStatisticsSolutionsRow(StatisticsSolutionsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StatisticsSolutionsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GenerationsDataTable : global::System.Data.TypedTableBase<GenerationsRow> {
            
            private global::System.Data.DataColumn columnSolution_ID;
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnGeneration_Number;
            
            private global::System.Data.DataColumn columnGeneration_Min_Score;
            
            private global::System.Data.DataColumn columnGeneration_Max_Score;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenerationsDataTable() {
                this.TableName = "Generations";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GenerationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GenerationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Solution_IDColumn {
                get {
                    return this.columnSolution_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Generation_NumberColumn {
                get {
                    return this.columnGeneration_Number;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Generation_Min_ScoreColumn {
                get {
                    return this.columnGeneration_Min_Score;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Generation_Max_ScoreColumn {
                get {
                    return this.columnGeneration_Max_Score;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenerationsRow this[int index] {
                get {
                    return ((GenerationsRow)(this.Rows[index]));
                }
            }
            
            public event GenerationsRowChangeEventHandler GenerationsRowChanging;
            
            public event GenerationsRowChangeEventHandler GenerationsRowChanged;
            
            public event GenerationsRowChangeEventHandler GenerationsRowDeleting;
            
            public event GenerationsRowChangeEventHandler GenerationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGenerationsRow(GenerationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenerationsRow AddGenerationsRow(int Solution_ID, int Problem_ID, int Generation_Number, double Generation_Min_Score, double Generation_Max_Score) {
                GenerationsRow rowGenerationsRow = ((GenerationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Solution_ID,
                        Problem_ID,
                        Generation_Number,
                        Generation_Min_Score,
                        Generation_Max_Score};
                rowGenerationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGenerationsRow);
                return rowGenerationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GenerationsDataTable cln = ((GenerationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GenerationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSolution_ID = base.Columns["Solution_ID"];
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnGeneration_Number = base.Columns["Generation_Number"];
                this.columnGeneration_Min_Score = base.Columns["Generation_Min_Score"];
                this.columnGeneration_Max_Score = base.Columns["Generation_Max_Score"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSolution_ID = new global::System.Data.DataColumn("Solution_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSolution_ID);
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnGeneration_Number = new global::System.Data.DataColumn("Generation_Number", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGeneration_Number);
                this.columnGeneration_Min_Score = new global::System.Data.DataColumn("Generation_Min_Score", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGeneration_Min_Score);
                this.columnGeneration_Max_Score = new global::System.Data.DataColumn("Generation_Max_Score", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGeneration_Max_Score);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("GenerationsKey2", new global::System.Data.DataColumn[] {
                                this.columnSolution_ID,
                                this.columnProblem_ID,
                                this.columnGeneration_Number}, false));
                this.columnSolution_ID.AllowDBNull = false;
                this.columnProblem_ID.AllowDBNull = false;
                this.columnGeneration_Number.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenerationsRow NewGenerationsRow() {
                return ((GenerationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GenerationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GenerationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GenerationsRowChanged != null)) {
                    this.GenerationsRowChanged(this, new GenerationsRowChangeEvent(((GenerationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GenerationsRowChanging != null)) {
                    this.GenerationsRowChanging(this, new GenerationsRowChangeEvent(((GenerationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GenerationsRowDeleted != null)) {
                    this.GenerationsRowDeleted(this, new GenerationsRowChangeEvent(((GenerationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GenerationsRowDeleting != null)) {
                    this.GenerationsRowDeleting(this, new GenerationsRowChangeEvent(((GenerationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGenerationsRow(GenerationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GenerationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BestSolutionDataTable : global::System.Data.TypedTableBase<BestSolutionRow> {
            
            private global::System.Data.DataColumn columnSolution_ID;
            
            private global::System.Data.DataColumn columnProblem_ID;
            
            private global::System.Data.DataColumn columnResource_ID;
            
            private global::System.Data.DataColumn columnFamily_ID;
            
            private global::System.Data.DataColumn columnStep_ID;
            
            private global::System.Data.DataColumn columnJob_ID;
            
            private global::System.Data.DataColumn columnStart_Time;
            
            private global::System.Data.DataColumn columnFinish_Time;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionDataTable() {
                this.TableName = "BestSolution";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BestSolutionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BestSolutionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Solution_IDColumn {
                get {
                    return this.columnSolution_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Problem_IDColumn {
                get {
                    return this.columnProblem_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Resource_IDColumn {
                get {
                    return this.columnResource_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Family_IDColumn {
                get {
                    return this.columnFamily_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Step_IDColumn {
                get {
                    return this.columnStep_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Job_IDColumn {
                get {
                    return this.columnJob_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Start_TimeColumn {
                get {
                    return this.columnStart_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Finish_TimeColumn {
                get {
                    return this.columnFinish_Time;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionRow this[int index] {
                get {
                    return ((BestSolutionRow)(this.Rows[index]));
                }
            }
            
            public event BestSolutionRowChangeEventHandler BestSolutionRowChanging;
            
            public event BestSolutionRowChangeEventHandler BestSolutionRowChanged;
            
            public event BestSolutionRowChangeEventHandler BestSolutionRowDeleting;
            
            public event BestSolutionRowChangeEventHandler BestSolutionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBestSolutionRow(BestSolutionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionRow AddBestSolutionRow(int Solution_ID, int Problem_ID, int Resource_ID, int Family_ID, int Step_ID, int Job_ID, double Start_Time, double Finish_Time) {
                BestSolutionRow rowBestSolutionRow = ((BestSolutionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Solution_ID,
                        Problem_ID,
                        Resource_ID,
                        Family_ID,
                        Step_ID,
                        Job_ID,
                        Start_Time,
                        Finish_Time};
                rowBestSolutionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBestSolutionRow);
                return rowBestSolutionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BestSolutionDataTable cln = ((BestSolutionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BestSolutionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSolution_ID = base.Columns["Solution_ID"];
                this.columnProblem_ID = base.Columns["Problem_ID"];
                this.columnResource_ID = base.Columns["Resource_ID"];
                this.columnFamily_ID = base.Columns["Family_ID"];
                this.columnStep_ID = base.Columns["Step_ID"];
                this.columnJob_ID = base.Columns["Job_ID"];
                this.columnStart_Time = base.Columns["Start_Time"];
                this.columnFinish_Time = base.Columns["Finish_Time"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSolution_ID = new global::System.Data.DataColumn("Solution_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSolution_ID);
                this.columnProblem_ID = new global::System.Data.DataColumn("Problem_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProblem_ID);
                this.columnResource_ID = new global::System.Data.DataColumn("Resource_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnResource_ID);
                this.columnFamily_ID = new global::System.Data.DataColumn("Family_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamily_ID);
                this.columnStep_ID = new global::System.Data.DataColumn("Step_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStep_ID);
                this.columnJob_ID = new global::System.Data.DataColumn("Job_ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJob_ID);
                this.columnStart_Time = new global::System.Data.DataColumn("Start_Time", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStart_Time);
                this.columnFinish_Time = new global::System.Data.DataColumn("Finish_Time", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinish_Time);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("BestSolutionKey1", new global::System.Data.DataColumn[] {
                                this.columnSolution_ID,
                                this.columnProblem_ID,
                                this.columnResource_ID,
                                this.columnFamily_ID,
                                this.columnStep_ID,
                                this.columnJob_ID}, false));
                this.columnSolution_ID.AllowDBNull = false;
                this.columnProblem_ID.AllowDBNull = false;
                this.columnResource_ID.AllowDBNull = false;
                this.columnFamily_ID.AllowDBNull = false;
                this.columnStep_ID.AllowDBNull = false;
                this.columnJob_ID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionRow NewBestSolutionRow() {
                return ((BestSolutionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BestSolutionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BestSolutionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BestSolutionRowChanged != null)) {
                    this.BestSolutionRowChanged(this, new BestSolutionRowChangeEvent(((BestSolutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BestSolutionRowChanging != null)) {
                    this.BestSolutionRowChanging(this, new BestSolutionRowChangeEvent(((BestSolutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BestSolutionRowDeleted != null)) {
                    this.BestSolutionRowDeleted(this, new BestSolutionRowChangeEvent(((BestSolutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BestSolutionRowDeleting != null)) {
                    this.BestSolutionRowDeleting(this, new BestSolutionRowChangeEvent(((BestSolutionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBestSolutionRow(BestSolutionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BestSolutionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResourceUsageRow : global::System.Data.DataRow {
            
            private ResourceUsageDataTable tableResourceUsage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResourceUsageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResourceUsage = ((ResourceUsageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableResourceUsage.Problem_IDColumn]));
                }
                set {
                    this[this.tableResourceUsage.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_ID {
                get {
                    return ((int)(this[this.tableResourceUsage.Operation_IDColumn]));
                }
                set {
                    this[this.tableResourceUsage.Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mode_ID {
                get {
                    return ((int)(this[this.tableResourceUsage.Mode_IDColumn]));
                }
                set {
                    this[this.tableResourceUsage.Mode_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Resource_ID {
                get {
                    return ((int)(this[this.tableResourceUsage.Resource_IDColumn]));
                }
                set {
                    this[this.tableResourceUsage.Resource_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Ts {
                get {
                    try {
                        return ((int)(this[this.tableResourceUsage.TsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Ts\' in table \'ResourceUsage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResourceUsage.TsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Tf {
                get {
                    try {
                        return ((int)(this[this.tableResourceUsage.TfColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tf\' in table \'ResourceUsage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResourceUsage.TfColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow ModesRowParent {
                get {
                    return ((ModesRow)(this.GetParentRow(this.Table.ParentRelations["ModesResourceUsage"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ModesResourceUsage"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow ResourcesRowParent {
                get {
                    return ((ResourcesRow)(this.GetParentRow(this.Table.ParentRelations["ResourcesResourceUsage"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ResourcesResourceUsage"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTsNull() {
                return this.IsNull(this.tableResourceUsage.TsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTsNull() {
                this[this.tableResourceUsage.TsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTfNull() {
                return this.IsNull(this.tableResourceUsage.TfColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTfNull() {
                this[this.tableResourceUsage.TfColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FamiliesRow : global::System.Data.DataRow {
            
            private FamiliesDataTable tableFamilies;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FamiliesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFamilies = ((FamiliesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableFamilies.Problem_IDColumn]));
                }
                set {
                    this[this.tableFamilies.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    return ((int)(this[this.tableFamilies.Family_IDColumn]));
                }
                set {
                    this[this.tableFamilies.Family_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableFamilies.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Families\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilies.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableFamilies.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Families\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilies.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableFamilies.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableFamilies.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableFamilies.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableFamilies.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobsRow[] GetJobsRows() {
                if ((this.Table.ChildRelations["FamiliesJobs"] == null)) {
                    return new JobsRow[0];
                }
                else {
                    return ((JobsRow[])(base.GetChildRows(this.Table.ChildRelations["FamiliesJobs"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrecedenceRow[] GetPrecedenceRows() {
                if ((this.Table.ChildRelations["FamiliesPrecedence"] == null)) {
                    return new PrecedenceRow[0];
                }
                else {
                    return ((PrecedenceRow[])(base.GetChildRows(this.Table.ChildRelations["FamiliesPrecedence"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyCapacityOnResourceRow[] GetFamilyCapacityOnResourceRows() {
                if ((this.Table.ChildRelations["FamiliesFamilyCapacityOnResource"] == null)) {
                    return new FamilyCapacityOnResourceRow[0];
                }
                else {
                    return ((FamilyCapacityOnResourceRow[])(base.GetChildRows(this.Table.ChildRelations["FamiliesFamilyCapacityOnResource"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsToFamiliesRow[] GetOperationsToFamiliesRows() {
                if ((this.Table.ChildRelations["FamiliesOperationsToFamilies"] == null)) {
                    return new OperationsToFamiliesRow[0];
                }
                else {
                    return ((OperationsToFamiliesRow[])(base.GetChildRows(this.Table.ChildRelations["FamiliesOperationsToFamilies"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionRow[] GetBestSolutionRows() {
                if ((this.Table.ChildRelations["Families_BestSolution"] == null)) {
                    return new BestSolutionRow[0];
                }
                else {
                    return ((BestSolutionRow[])(base.GetChildRows(this.Table.ChildRelations["Families_BestSolution"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OperationsRow : global::System.Data.DataRow {
            
            private OperationsDataTable tableOperations;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOperations = ((OperationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableOperations.Problem_IDColumn]));
                }
                set {
                    this[this.tableOperations.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_ID {
                get {
                    return ((int)(this[this.tableOperations.Operation_IDColumn]));
                }
                set {
                    this[this.tableOperations.Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableOperations.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Operations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperations.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableOperations.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Operations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOperations.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableOperations.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableOperations.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableOperations.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableOperations.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow[] GetModesRows() {
                if ((this.Table.ChildRelations["OperationsModes"] == null)) {
                    return new ModesRow[0];
                }
                else {
                    return ((ModesRow[])(base.GetChildRows(this.Table.ChildRelations["OperationsModes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsToFamiliesRow[] GetOperationsToFamiliesRows() {
                if ((this.Table.ChildRelations["OperationsOperationsToFamilies"] == null)) {
                    return new OperationsToFamiliesRow[0];
                }
                else {
                    return ((OperationsToFamiliesRow[])(base.GetChildRows(this.Table.ChildRelations["OperationsOperationsToFamilies"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionRow[] GetBestSolutionRows() {
                if ((this.Table.ChildRelations["Operations_BestSolution"] == null)) {
                    return new BestSolutionRow[0];
                }
                else {
                    return ((BestSolutionRow[])(base.GetChildRows(this.Table.ChildRelations["Operations_BestSolution"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProblemsRow : global::System.Data.DataRow {
            
            private ProblemsDataTable tableProblems;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProblemsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProblems = ((ProblemsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableProblems.Problem_IDColumn]));
                }
                set {
                    this[this.tableProblems.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableProblems.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IF_RR {
                get {
                    try {
                        return ((int)(this[this.tableProblems.IF_RRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IF_RR\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.IF_RRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IF_NP {
                get {
                    try {
                        return ((int)(this[this.tableProblems.IF_NPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IF_NP\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.IF_NPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IF_NE {
                get {
                    try {
                        return ((int)(this[this.tableProblems.IF_NEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IF_NE\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.IF_NEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IF_NM {
                get {
                    try {
                        return ((int)(this[this.tableProblems.IF_NMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IF_NM\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.IF_NMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IF_AR {
                get {
                    try {
                        return ((int)(this[this.tableProblems.IF_ARColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IF_AR\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.IF_ARColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IF_AOR {
                get {
                    try {
                        return ((int)(this[this.tableProblems.IF_AORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IF_AOR\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.IF_AORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int IF_ARC {
                get {
                    try {
                        return ((int)(this[this.tableProblems.IF_ARCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IF_ARC\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.IF_ARCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RF_NZV {
                get {
                    try {
                        return ((int)(this[this.tableProblems.RF_NZVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RF_NZV\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.RF_NZVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RF_NCV {
                get {
                    try {
                        return ((int)(this[this.tableProblems.RF_NCVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RF_NCV\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.RF_NCVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RF_NRW {
                get {
                    try {
                        return ((int)(this[this.tableProblems.RF_NRWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RF_NRW\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.RF_NRWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RF_TCM {
                get {
                    try {
                        return ((int)(this[this.tableProblems.RF_TCMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RF_TCM\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.RF_TCMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RF_TFC {
                get {
                    try {
                        return ((int)(this[this.tableProblems.RF_TFCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RF_TFC\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.RF_TFCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RF_MPNZ {
                get {
                    try {
                        return ((int)(this[this.tableProblems.RF_MPNZColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RF_MPNZ\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.RF_MPNZColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RF_NBC {
                get {
                    try {
                        return ((int)(this[this.tableProblems.RF_NBCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RF_NBC\' in table \'Problems\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProblems.RF_NBCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableProblems.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableProblems.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIF_RRNull() {
                return this.IsNull(this.tableProblems.IF_RRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIF_RRNull() {
                this[this.tableProblems.IF_RRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIF_NPNull() {
                return this.IsNull(this.tableProblems.IF_NPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIF_NPNull() {
                this[this.tableProblems.IF_NPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIF_NENull() {
                return this.IsNull(this.tableProblems.IF_NEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIF_NENull() {
                this[this.tableProblems.IF_NEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIF_NMNull() {
                return this.IsNull(this.tableProblems.IF_NMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIF_NMNull() {
                this[this.tableProblems.IF_NMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIF_ARNull() {
                return this.IsNull(this.tableProblems.IF_ARColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIF_ARNull() {
                this[this.tableProblems.IF_ARColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIF_AORNull() {
                return this.IsNull(this.tableProblems.IF_AORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIF_AORNull() {
                this[this.tableProblems.IF_AORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIF_ARCNull() {
                return this.IsNull(this.tableProblems.IF_ARCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIF_ARCNull() {
                this[this.tableProblems.IF_ARCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRF_NZVNull() {
                return this.IsNull(this.tableProblems.RF_NZVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRF_NZVNull() {
                this[this.tableProblems.RF_NZVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRF_NCVNull() {
                return this.IsNull(this.tableProblems.RF_NCVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRF_NCVNull() {
                this[this.tableProblems.RF_NCVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRF_NRWNull() {
                return this.IsNull(this.tableProblems.RF_NRWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRF_NRWNull() {
                this[this.tableProblems.RF_NRWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRF_TCMNull() {
                return this.IsNull(this.tableProblems.RF_TCMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRF_TCMNull() {
                this[this.tableProblems.RF_TCMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRF_TFCNull() {
                return this.IsNull(this.tableProblems.RF_TFCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRF_TFCNull() {
                this[this.tableProblems.RF_TFCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRF_MPNZNull() {
                return this.IsNull(this.tableProblems.RF_MPNZColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRF_MPNZNull() {
                this[this.tableProblems.RF_MPNZColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRF_NBCNull() {
                return this.IsNull(this.tableProblems.RF_NBCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRF_NBCNull() {
                this[this.tableProblems.RF_NBCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsSolutionsRow[] GetStatisticsSolutionsRows() {
                if ((this.Table.ChildRelations["Problems_Solutions"] == null)) {
                    return new StatisticsSolutionsRow[0];
                }
                else {
                    return ((StatisticsSolutionsRow[])(base.GetChildRows(this.Table.ChildRelations["Problems_Solutions"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OperationsToFamiliesRow : global::System.Data.DataRow {
            
            private OperationsToFamiliesDataTable tableOperationsToFamilies;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OperationsToFamiliesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOperationsToFamilies = ((OperationsToFamiliesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableOperationsToFamilies.Problem_IDColumn]));
                }
                set {
                    this[this.tableOperationsToFamilies.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    return ((int)(this[this.tableOperationsToFamilies.Family_IDColumn]));
                }
                set {
                    this[this.tableOperationsToFamilies.Family_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_ID {
                get {
                    return ((int)(this[this.tableOperationsToFamilies.Operation_IDColumn]));
                }
                set {
                    this[this.tableOperationsToFamilies.Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow OperationsRowParent {
                get {
                    return ((OperationsRow)(this.GetParentRow(this.Table.ParentRelations["OperationsOperationsToFamilies"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OperationsOperationsToFamilies"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow FamiliesRowParent {
                get {
                    return ((FamiliesRow)(this.GetParentRow(this.Table.ParentRelations["FamiliesOperationsToFamilies"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FamiliesOperationsToFamilies"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ModesRow : global::System.Data.DataRow {
            
            private ModesDataTable tableModes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ModesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableModes = ((ModesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableModes.Problem_IDColumn]));
                }
                set {
                    this[this.tableModes.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_ID {
                get {
                    return ((int)(this[this.tableModes.Operation_IDColumn]));
                }
                set {
                    this[this.tableModes.Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mode_ID {
                get {
                    return ((int)(this[this.tableModes.Mode_IDColumn]));
                }
                set {
                    this[this.tableModes.Mode_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableModes.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Modes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModes.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableModes.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Modes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableModes.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow OperationsRowParent {
                get {
                    return ((OperationsRow)(this.GetParentRow(this.Table.ParentRelations["OperationsModes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["OperationsModes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableModes.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableModes.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableModes.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableModes.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourceUsageRow[] GetResourceUsageRows() {
                if ((this.Table.ChildRelations["ModesResourceUsage"] == null)) {
                    return new ResourceUsageRow[0];
                }
                else {
                    return ((ResourceUsageRow[])(base.GetChildRows(this.Table.ChildRelations["ModesResourceUsage"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ResourcesRow : global::System.Data.DataRow {
            
            private ResourcesDataTable tableResources;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResourcesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResources = ((ResourcesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableResources.Problem_IDColumn]));
                }
                set {
                    this[this.tableResources.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Resource_ID {
                get {
                    return ((int)(this[this.tableResources.Resource_IDColumn]));
                }
                set {
                    this[this.tableResources.Resource_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableResources.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Resources\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResources.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Capacity_Kr {
                get {
                    try {
                        return ((int)(this[this.tableResources.Capacity_KrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Capacity Kr\' in table \'Resources\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResources.Capacity_KrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Release_Date_tr1 {
                get {
                    try {
                        return ((int)(this[this.tableResources.Release_Date_tr1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Release_Date tr1\' in table \'Resources\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResources.Release_Date_tr1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableResources.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableResources.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCapacity_KrNull() {
                return this.IsNull(this.tableResources.Capacity_KrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCapacity_KrNull() {
                this[this.tableResources.Capacity_KrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelease_Date_tr1Null() {
                return this.IsNull(this.tableResources.Release_Date_tr1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelease_Date_tr1Null() {
                this[this.tableResources.Release_Date_tr1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadingTimesRow[] GetLoadingTimesRows() {
                if ((this.Table.ChildRelations["ResourcesLoadingTimes"] == null)) {
                    return new LoadingTimesRow[0];
                }
                else {
                    return ((LoadingTimesRow[])(base.GetChildRows(this.Table.ChildRelations["ResourcesLoadingTimes"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourceUsageRow[] GetResourceUsageRows() {
                if ((this.Table.ChildRelations["ResourcesResourceUsage"] == null)) {
                    return new ResourceUsageRow[0];
                }
                else {
                    return ((ResourceUsageRow[])(base.GetChildRows(this.Table.ChildRelations["ResourcesResourceUsage"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionRow[] GetBestSolutionRows() {
                if ((this.Table.ChildRelations["Resources_BestSolution"] == null)) {
                    return new BestSolutionRow[0];
                }
                else {
                    return ((BestSolutionRow[])(base.GetChildRows(this.Table.ChildRelations["Resources_BestSolution"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FamilyCapacityOnResourceRow : global::System.Data.DataRow {
            
            private FamilyCapacityOnResourceDataTable tableFamilyCapacityOnResource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FamilyCapacityOnResourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFamilyCapacityOnResource = ((FamilyCapacityOnResourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableFamilyCapacityOnResource.Problem_IDColumn]));
                }
                set {
                    this[this.tableFamilyCapacityOnResource.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    return ((int)(this[this.tableFamilyCapacityOnResource.Family_IDColumn]));
                }
                set {
                    this[this.tableFamilyCapacityOnResource.Family_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Resource_ID {
                get {
                    return ((int)(this[this.tableFamilyCapacityOnResource.Resource_IDColumn]));
                }
                set {
                    this[this.tableFamilyCapacityOnResource.Resource_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_Capacity_kfr {
                get {
                    try {
                        return ((int)(this[this.tableFamilyCapacityOnResource.Family_Capacity_kfrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Family_Capacity kfr\' in table \'FamilyCapacityOnResource\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableFamilyCapacityOnResource.Family_Capacity_kfrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow FamiliesRowParent {
                get {
                    return ((FamiliesRow)(this.GetParentRow(this.Table.ParentRelations["FamiliesFamilyCapacityOnResource"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FamiliesFamilyCapacityOnResource"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamily_Capacity_kfrNull() {
                return this.IsNull(this.tableFamilyCapacityOnResource.Family_Capacity_kfrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamily_Capacity_kfrNull() {
                this[this.tableFamilyCapacityOnResource.Family_Capacity_kfrColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PrecedenceRow : global::System.Data.DataRow {
            
            private PrecedenceDataTable tablePrecedence;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PrecedenceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePrecedence = ((PrecedenceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tablePrecedence.Problem_IDColumn]));
                }
                set {
                    this[this.tablePrecedence.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    return ((int)(this[this.tablePrecedence.Family_IDColumn]));
                }
                set {
                    this[this.tablePrecedence.Family_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Previous_Operation_ID {
                get {
                    return ((int)(this[this.tablePrecedence.Previous_Operation_IDColumn]));
                }
                set {
                    this[this.tablePrecedence.Previous_Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Subsequent_Operation_ID {
                get {
                    return ((int)(this[this.tablePrecedence.Subsequent_Operation_IDColumn]));
                }
                set {
                    this[this.tablePrecedence.Subsequent_Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinLfi1i2 {
                get {
                    try {
                        return ((int)(this[this.tablePrecedence.MinLfi1i2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinLfi1i2\' in table \'Precedence\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrecedence.MinLfi1i2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxLfi1i2 {
                get {
                    try {
                        return ((int)(this[this.tablePrecedence.MaxLfi1i2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxLfi1i2\' in table \'Precedence\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePrecedence.MaxLfi1i2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow FamiliesRowParent {
                get {
                    return ((FamiliesRow)(this.GetParentRow(this.Table.ParentRelations["FamiliesPrecedence"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FamiliesPrecedence"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinLfi1i2Null() {
                return this.IsNull(this.tablePrecedence.MinLfi1i2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinLfi1i2Null() {
                this[this.tablePrecedence.MinLfi1i2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxLfi1i2Null() {
                return this.IsNull(this.tablePrecedence.MaxLfi1i2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxLfi1i2Null() {
                this[this.tablePrecedence.MaxLfi1i2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JobsRow : global::System.Data.DataRow {
            
            private JobsDataTable tableJobs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJobs = ((JobsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableJobs.Problem_IDColumn]));
                }
                set {
                    this[this.tableJobs.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    return ((int)(this[this.tableJobs.Family_IDColumn]));
                }
                set {
                    this[this.tableJobs.Family_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Job_ID {
                get {
                    return ((int)(this[this.tableJobs.Job_IDColumn]));
                }
                set {
                    this[this.tableJobs.Job_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Units {
                get {
                    try {
                        return ((int)(this[this.tableJobs.UnitsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Units\' in table \'Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobs.UnitsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Release_Date {
                get {
                    try {
                        return ((int)(this[this.tableJobs.Release_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Release_Date\' in table \'Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobs.Release_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] Release_D {
                get {
                    try {
                        return ((byte[])(this[this.tableJobs.Release_DColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Release_D\' in table \'Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobs.Release_DColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Due_Date {
                get {
                    try {
                        return ((int)(this[this.tableJobs.Due_DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Due_Date\' in table \'Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobs.Due_DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Weight {
                get {
                    try {
                        return ((int)(this[this.tableJobs.WeightColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Weight\' in table \'Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobs.WeightColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow FamiliesRowParent {
                get {
                    return ((FamiliesRow)(this.GetParentRow(this.Table.ParentRelations["FamiliesJobs"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FamiliesJobs"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUnitsNull() {
                return this.IsNull(this.tableJobs.UnitsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUnitsNull() {
                this[this.tableJobs.UnitsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelease_DateNull() {
                return this.IsNull(this.tableJobs.Release_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelease_DateNull() {
                this[this.tableJobs.Release_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRelease_DNull() {
                return this.IsNull(this.tableJobs.Release_DColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRelease_DNull() {
                this[this.tableJobs.Release_DColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDue_DateNull() {
                return this.IsNull(this.tableJobs.Due_DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDue_DateNull() {
                this[this.tableJobs.Due_DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWeightNull() {
                return this.IsNull(this.tableJobs.WeightColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWeightNull() {
                this[this.tableJobs.WeightColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LoadingTimesRow : global::System.Data.DataRow {
            
            private LoadingTimesDataTable tableLoadingTimes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LoadingTimesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLoadingTimes = ((LoadingTimesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableLoadingTimes.Problem_IDColumn]));
                }
                set {
                    this[this.tableLoadingTimes.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_ID {
                get {
                    return ((int)(this[this.tableLoadingTimes.Operation_IDColumn]));
                }
                set {
                    this[this.tableLoadingTimes.Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Resource_ID {
                get {
                    return ((int)(this[this.tableLoadingTimes.Resource_IDColumn]));
                }
                set {
                    this[this.tableLoadingTimes.Resource_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mode_ID {
                get {
                    return ((int)(this[this.tableLoadingTimes.Mode_IDColumn]));
                }
                set {
                    this[this.tableLoadingTimes.Mode_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DLimr {
                get {
                    try {
                        return ((int)(this[this.tableLoadingTimes.DLimrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DLimr\' in table \'LoadingTimes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLoadingTimes.DLimrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow ResourcesRowParent {
                get {
                    return ((ResourcesRow)(this.GetParentRow(this.Table.ParentRelations["ResourcesLoadingTimes"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ResourcesLoadingTimes"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDLimrNull() {
                return this.IsNull(this.tableLoadingTimes.DLimrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDLimrNull() {
                this[this.tableLoadingTimes.DLimrColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ConstantDelaysRow : global::System.Data.DataRow {
            
            private ConstantDelaysDataTable tableConstantDelays;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConstantDelaysRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConstantDelays = ((ConstantDelaysDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableConstantDelays.Problem_IDColumn]));
                }
                set {
                    this[this.tableConstantDelays.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation1_ID {
                get {
                    return ((int)(this[this.tableConstantDelays.Operation1_IDColumn]));
                }
                set {
                    this[this.tableConstantDelays.Operation1_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mode1_ID {
                get {
                    return ((int)(this[this.tableConstantDelays.Mode1_IDColumn]));
                }
                set {
                    this[this.tableConstantDelays.Mode1_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation2_ID {
                get {
                    return ((int)(this[this.tableConstantDelays.Operation2_IDColumn]));
                }
                set {
                    this[this.tableConstantDelays.Operation2_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mode2_ID {
                get {
                    return ((int)(this[this.tableConstantDelays.Mode2_IDColumn]));
                }
                set {
                    this[this.tableConstantDelays.Mode2_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Resource_ID {
                get {
                    return ((int)(this[this.tableConstantDelays.Resource_IDColumn]));
                }
                set {
                    this[this.tableConstantDelays.Resource_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int di1m1i2m2r {
                get {
                    try {
                        return ((int)(this[this.tableConstantDelays.di1m1i2m2rColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'di1m1i2m2r\' in table \'ConstantDelays\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConstantDelays.di1m1i2m2rColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdi1m1i2m2rNull() {
                return this.IsNull(this.tableConstantDelays.di1m1i2m2rColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdi1m1i2m2rNull() {
                this[this.tableConstantDelays.di1m1i2m2rColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Exclusive_FamiliesRow : global::System.Data.DataRow {
            
            private Exclusive_FamiliesDataTable tableExclusive_Families;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Exclusive_FamiliesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExclusive_Families = ((Exclusive_FamiliesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableExclusive_Families.Problem_IDColumn]));
                }
                set {
                    this[this.tableExclusive_Families.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_ID {
                get {
                    return ((int)(this[this.tableExclusive_Families.Operation_IDColumn]));
                }
                set {
                    this[this.tableExclusive_Families.Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mode_ID {
                get {
                    return ((int)(this[this.tableExclusive_Families.Mode_IDColumn]));
                }
                set {
                    this[this.tableExclusive_Families.Mode_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Resource_ID {
                get {
                    return ((int)(this[this.tableExclusive_Families.Resource_IDColumn]));
                }
                set {
                    this[this.tableExclusive_Families.Resource_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Excusive_Families_ID {
                get {
                    return ((int)(this[this.tableExclusive_Families.Excusive_Families_IDColumn]));
                }
                set {
                    this[this.tableExclusive_Families.Excusive_Families_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    return ((int)(this[this.tableExclusive_Families.Family_IDColumn]));
                }
                set {
                    this[this.tableExclusive_Families.Family_IDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class Exclusive_JobsRow : global::System.Data.DataRow {
            
            private Exclusive_JobsDataTable tableExclusive_Jobs;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal Exclusive_JobsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExclusive_Jobs = ((Exclusive_JobsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    try {
                        return ((int)(this[this.tableExclusive_Jobs.Problem_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Problem_ID\' in table \'Exclusive_Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExclusive_Jobs.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    try {
                        return ((int)(this[this.tableExclusive_Jobs.Family_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Family_ID\' in table \'Exclusive_Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExclusive_Jobs.Family_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_ID {
                get {
                    try {
                        return ((int)(this[this.tableExclusive_Jobs.Operation_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Operation_ID\' in table \'Exclusive_Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExclusive_Jobs.Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mode_ID {
                get {
                    try {
                        return ((int)(this[this.tableExclusive_Jobs.Mode_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mode_ID\' in table \'Exclusive_Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExclusive_Jobs.Mode_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Resource_ID {
                get {
                    try {
                        return ((int)(this[this.tableExclusive_Jobs.Resource_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Resource_ID\' in table \'Exclusive_Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExclusive_Jobs.Resource_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Exclusive_Jobs_ID {
                get {
                    try {
                        return ((int)(this[this.tableExclusive_Jobs.Exclusive_Jobs_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Exclusive_Jobs_ID\' in table \'Exclusive_Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExclusive_Jobs.Exclusive_Jobs_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Job_ID {
                get {
                    try {
                        return ((int)(this[this.tableExclusive_Jobs.Job_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Job_ID\' in table \'Exclusive_Jobs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableExclusive_Jobs.Job_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProblem_IDNull() {
                return this.IsNull(this.tableExclusive_Jobs.Problem_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProblem_IDNull() {
                this[this.tableExclusive_Jobs.Problem_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamily_IDNull() {
                return this.IsNull(this.tableExclusive_Jobs.Family_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamily_IDNull() {
                this[this.tableExclusive_Jobs.Family_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperation_IDNull() {
                return this.IsNull(this.tableExclusive_Jobs.Operation_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperation_IDNull() {
                this[this.tableExclusive_Jobs.Operation_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMode_IDNull() {
                return this.IsNull(this.tableExclusive_Jobs.Mode_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMode_IDNull() {
                this[this.tableExclusive_Jobs.Mode_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsResource_IDNull() {
                return this.IsNull(this.tableExclusive_Jobs.Resource_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetResource_IDNull() {
                this[this.tableExclusive_Jobs.Resource_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExclusive_Jobs_IDNull() {
                return this.IsNull(this.tableExclusive_Jobs.Exclusive_Jobs_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExclusive_Jobs_IDNull() {
                this[this.tableExclusive_Jobs.Exclusive_Jobs_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJob_IDNull() {
                return this.IsNull(this.tableExclusive_Jobs.Job_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJob_IDNull() {
                this[this.tableExclusive_Jobs.Job_IDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ComplementariesRow : global::System.Data.DataRow {
            
            private ComplementariesDataTable tableComplementaries;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ComplementariesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableComplementaries = ((ComplementariesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableComplementaries.Problem_IDColumn]));
                }
                set {
                    this[this.tableComplementaries.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    return ((int)(this[this.tableComplementaries.Family_IDColumn]));
                }
                set {
                    this[this.tableComplementaries.Family_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_ID {
                get {
                    return ((int)(this[this.tableComplementaries.Operation_IDColumn]));
                }
                set {
                    this[this.tableComplementaries.Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mode_ID {
                get {
                    return ((int)(this[this.tableComplementaries.Mode_IDColumn]));
                }
                set {
                    this[this.tableComplementaries.Mode_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Complementary_ID {
                get {
                    return ((int)(this[this.tableComplementaries.Complementary_IDColumn]));
                }
                set {
                    this[this.tableComplementaries.Complementary_IDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ExclusivesRow : global::System.Data.DataRow {
            
            private ExclusivesDataTable tableExclusives;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ExclusivesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableExclusives = ((ExclusivesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableExclusives.Problem_IDColumn]));
                }
                set {
                    this[this.tableExclusives.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Operation_ID {
                get {
                    return ((int)(this[this.tableExclusives.Operation_IDColumn]));
                }
                set {
                    this[this.tableExclusives.Operation_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Mode_ID {
                get {
                    return ((int)(this[this.tableExclusives.Mode_IDColumn]));
                }
                set {
                    this[this.tableExclusives.Mode_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Exclusive_ID {
                get {
                    return ((int)(this[this.tableExclusives.Exclusive_IDColumn]));
                }
                set {
                    this[this.tableExclusives.Exclusive_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    return ((int)(this[this.tableExclusives.Family_IDColumn]));
                }
                set {
                    this[this.tableExclusives.Family_IDColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StatisticsSolutionsRow : global::System.Data.DataRow {
            
            private StatisticsSolutionsDataTable tableStatisticsSolutions;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatisticsSolutionsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStatisticsSolutions = ((StatisticsSolutionsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Solution_ID {
                get {
                    return ((int)(this[this.tableStatisticsSolutions.Solution_IDColumn]));
                }
                set {
                    this[this.tableStatisticsSolutions.Solution_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableStatisticsSolutions.Problem_IDColumn]));
                }
                set {
                    this[this.tableStatisticsSolutions.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Population_Size {
                get {
                    return ((int)(this[this.tableStatisticsSolutions.Population_SizeColumn]));
                }
                set {
                    this[this.tableStatisticsSolutions.Population_SizeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Start_Time {
                get {
                    try {
                        return ((string)(this[this.tableStatisticsSolutions.Start_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Start_Time\' in table \'StatisticsSolutions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatisticsSolutions.Start_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Finish_Time {
                get {
                    try {
                        return ((string)(this[this.tableStatisticsSolutions.Finish_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Finish_Time\' in table \'StatisticsSolutions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatisticsSolutions.Finish_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mutation_precent {
                get {
                    try {
                        return ((string)(this[this.tableStatisticsSolutions.Mutation_precentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mutation_precent\' in table \'StatisticsSolutions\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableStatisticsSolutions.Mutation_precentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Solution_Name {
                get {
                    try {
                        return ((string)(this[this.tableStatisticsSolutions.Solution_NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Solution_Name\' in table \'StatisticsSolutions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatisticsSolutions.Solution_NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Seletion_Type {
                get {
                    try {
                        return ((string)(this[this.tableStatisticsSolutions.Seletion_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Seletion_Type\' in table \'StatisticsSolutions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatisticsSolutions.Seletion_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Crossover_Type {
                get {
                    try {
                        return ((string)(this[this.tableStatisticsSolutions.Crossover_TypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Crossover_Type\' in table \'StatisticsSolutions\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatisticsSolutions.Crossover_TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string First_Population {
                get {
                    try {
                        return ((string)(this[this.tableStatisticsSolutions.First_PopulationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'First_Population\' in table \'StatisticsSolutions\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableStatisticsSolutions.First_PopulationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Iteration_Number {
                get {
                    try {
                        return ((int)(this[this.tableStatisticsSolutions.Iteration_NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Iteration_Number\' in table \'StatisticsSolutions\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableStatisticsSolutions.Iteration_NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProblemsRow ProblemsRow {
                get {
                    return ((ProblemsRow)(this.GetParentRow(this.Table.ParentRelations["Problems_Solutions"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Problems_Solutions"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStart_TimeNull() {
                return this.IsNull(this.tableStatisticsSolutions.Start_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStart_TimeNull() {
                this[this.tableStatisticsSolutions.Start_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinish_TimeNull() {
                return this.IsNull(this.tableStatisticsSolutions.Finish_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinish_TimeNull() {
                this[this.tableStatisticsSolutions.Finish_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMutation_precentNull() {
                return this.IsNull(this.tableStatisticsSolutions.Mutation_precentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMutation_precentNull() {
                this[this.tableStatisticsSolutions.Mutation_precentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSolution_NameNull() {
                return this.IsNull(this.tableStatisticsSolutions.Solution_NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSolution_NameNull() {
                this[this.tableStatisticsSolutions.Solution_NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSeletion_TypeNull() {
                return this.IsNull(this.tableStatisticsSolutions.Seletion_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSeletion_TypeNull() {
                this[this.tableStatisticsSolutions.Seletion_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCrossover_TypeNull() {
                return this.IsNull(this.tableStatisticsSolutions.Crossover_TypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCrossover_TypeNull() {
                this[this.tableStatisticsSolutions.Crossover_TypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirst_PopulationNull() {
                return this.IsNull(this.tableStatisticsSolutions.First_PopulationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirst_PopulationNull() {
                this[this.tableStatisticsSolutions.First_PopulationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIteration_NumberNull() {
                return this.IsNull(this.tableStatisticsSolutions.Iteration_NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIteration_NumberNull() {
                this[this.tableStatisticsSolutions.Iteration_NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenerationsRow[] GetGenerationsRows() {
                if ((this.Table.ChildRelations["StatisticsSolutions_Generations"] == null)) {
                    return new GenerationsRow[0];
                }
                else {
                    return ((GenerationsRow[])(base.GetChildRows(this.Table.ChildRelations["StatisticsSolutions_Generations"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionRow[] GetBestSolutionRows() {
                if ((this.Table.ChildRelations["StatisticsSolutions_BestSolution"] == null)) {
                    return new BestSolutionRow[0];
                }
                else {
                    return ((BestSolutionRow[])(base.GetChildRows(this.Table.ChildRelations["StatisticsSolutions_BestSolution"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GenerationsRow : global::System.Data.DataRow {
            
            private GenerationsDataTable tableGenerations;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GenerationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGenerations = ((GenerationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Solution_ID {
                get {
                    return ((int)(this[this.tableGenerations.Solution_IDColumn]));
                }
                set {
                    this[this.tableGenerations.Solution_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableGenerations.Problem_IDColumn]));
                }
                set {
                    this[this.tableGenerations.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Generation_Number {
                get {
                    return ((int)(this[this.tableGenerations.Generation_NumberColumn]));
                }
                set {
                    this[this.tableGenerations.Generation_NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Generation_Min_Score {
                get {
                    try {
                        return ((double)(this[this.tableGenerations.Generation_Min_ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Generation_Min_Score\' in table \'Generations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGenerations.Generation_Min_ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Generation_Max_Score {
                get {
                    try {
                        return ((double)(this[this.tableGenerations.Generation_Max_ScoreColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Generation_Max_Score\' in table \'Generations\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGenerations.Generation_Max_ScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsSolutionsRow StatisticsSolutionsRowParent {
                get {
                    return ((StatisticsSolutionsRow)(this.GetParentRow(this.Table.ParentRelations["StatisticsSolutions_Generations"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StatisticsSolutions_Generations"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGeneration_Min_ScoreNull() {
                return this.IsNull(this.tableGenerations.Generation_Min_ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGeneration_Min_ScoreNull() {
                this[this.tableGenerations.Generation_Min_ScoreColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGeneration_Max_ScoreNull() {
                return this.IsNull(this.tableGenerations.Generation_Max_ScoreColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGeneration_Max_ScoreNull() {
                this[this.tableGenerations.Generation_Max_ScoreColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BestSolutionRow : global::System.Data.DataRow {
            
            private BestSolutionDataTable tableBestSolution;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BestSolutionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBestSolution = ((BestSolutionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Solution_ID {
                get {
                    return ((int)(this[this.tableBestSolution.Solution_IDColumn]));
                }
                set {
                    this[this.tableBestSolution.Solution_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Problem_ID {
                get {
                    return ((int)(this[this.tableBestSolution.Problem_IDColumn]));
                }
                set {
                    this[this.tableBestSolution.Problem_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Resource_ID {
                get {
                    return ((int)(this[this.tableBestSolution.Resource_IDColumn]));
                }
                set {
                    this[this.tableBestSolution.Resource_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Family_ID {
                get {
                    return ((int)(this[this.tableBestSolution.Family_IDColumn]));
                }
                set {
                    this[this.tableBestSolution.Family_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Step_ID {
                get {
                    return ((int)(this[this.tableBestSolution.Step_IDColumn]));
                }
                set {
                    this[this.tableBestSolution.Step_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Job_ID {
                get {
                    return ((int)(this[this.tableBestSolution.Job_IDColumn]));
                }
                set {
                    this[this.tableBestSolution.Job_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Start_Time {
                get {
                    try {
                        return ((double)(this[this.tableBestSolution.Start_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Start_Time\' in table \'BestSolution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBestSolution.Start_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double Finish_Time {
                get {
                    try {
                        return ((double)(this[this.tableBestSolution.Finish_TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Finish_Time\' in table \'BestSolution\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBestSolution.Finish_TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsSolutionsRow StatisticsSolutionsRowParent {
                get {
                    return ((StatisticsSolutionsRow)(this.GetParentRow(this.Table.ParentRelations["StatisticsSolutions_BestSolution"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StatisticsSolutions_BestSolution"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow ResourcesRowParent {
                get {
                    return ((ResourcesRow)(this.GetParentRow(this.Table.ParentRelations["Resources_BestSolution"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Resources_BestSolution"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow FamiliesRowParent {
                get {
                    return ((FamiliesRow)(this.GetParentRow(this.Table.ParentRelations["Families_BestSolution"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Families_BestSolution"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow OperationsRowParent {
                get {
                    return ((OperationsRow)(this.GetParentRow(this.Table.ParentRelations["Operations_BestSolution"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Operations_BestSolution"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStart_TimeNull() {
                return this.IsNull(this.tableBestSolution.Start_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStart_TimeNull() {
                this[this.tableBestSolution.Start_TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinish_TimeNull() {
                return this.IsNull(this.tableBestSolution.Finish_TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinish_TimeNull() {
                this[this.tableBestSolution.Finish_TimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResourceUsageRowChangeEvent : global::System.EventArgs {
            
            private ResourceUsageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourceUsageRowChangeEvent(ResourceUsageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourceUsageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FamiliesRowChangeEvent : global::System.EventArgs {
            
            private FamiliesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRowChangeEvent(FamiliesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamiliesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OperationsRowChangeEvent : global::System.EventArgs {
            
            private OperationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRowChangeEvent(OperationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProblemsRowChangeEvent : global::System.EventArgs {
            
            private ProblemsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProblemsRowChangeEvent(ProblemsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProblemsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OperationsToFamiliesRowChangeEvent : global::System.EventArgs {
            
            private OperationsToFamiliesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsToFamiliesRowChangeEvent(OperationsToFamiliesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OperationsToFamiliesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ModesRowChangeEvent : global::System.EventArgs {
            
            private ModesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRowChangeEvent(ModesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ModesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ResourcesRowChangeEvent : global::System.EventArgs {
            
            private ResourcesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRowChangeEvent(ResourcesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResourcesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FamilyCapacityOnResourceRowChangeEvent : global::System.EventArgs {
            
            private FamilyCapacityOnResourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyCapacityOnResourceRowChangeEvent(FamilyCapacityOnResourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FamilyCapacityOnResourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PrecedenceRowChangeEvent : global::System.EventArgs {
            
            private PrecedenceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrecedenceRowChangeEvent(PrecedenceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PrecedenceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JobsRowChangeEvent : global::System.EventArgs {
            
            private JobsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobsRowChangeEvent(JobsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LoadingTimesRowChangeEvent : global::System.EventArgs {
            
            private LoadingTimesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadingTimesRowChangeEvent(LoadingTimesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LoadingTimesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ConstantDelaysRowChangeEvent : global::System.EventArgs {
            
            private ConstantDelaysRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantDelaysRowChangeEvent(ConstantDelaysRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConstantDelaysRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Exclusive_FamiliesRowChangeEvent : global::System.EventArgs {
            
            private Exclusive_FamiliesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_FamiliesRowChangeEvent(Exclusive_FamiliesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_FamiliesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class Exclusive_JobsRowChangeEvent : global::System.EventArgs {
            
            private Exclusive_JobsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_JobsRowChangeEvent(Exclusive_JobsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public Exclusive_JobsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ComplementariesRowChangeEvent : global::System.EventArgs {
            
            private ComplementariesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplementariesRowChangeEvent(ComplementariesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ComplementariesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ExclusivesRowChangeEvent : global::System.EventArgs {
            
            private ExclusivesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExclusivesRowChangeEvent(ExclusivesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ExclusivesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StatisticsSolutionsRowChangeEvent : global::System.EventArgs {
            
            private StatisticsSolutionsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsSolutionsRowChangeEvent(StatisticsSolutionsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsSolutionsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GenerationsRowChangeEvent : global::System.EventArgs {
            
            private GenerationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenerationsRowChangeEvent(GenerationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GenerationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BestSolutionRowChangeEvent : global::System.EventArgs {
            
            private BestSolutionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionRowChangeEvent(BestSolutionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BestSolutionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591